File Path: src\main\java\com\example\autofuelx\controller\LogoutServlet.java
package com.example.autofuelx.controller;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/user/logout")public class LogoutServlet extends HttpServlet {  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get current session    HttpSession session = request.getSession(false);    if (session != null) {      session.invalidate(); // Destroy session    }    response.sendRedirect(request.getContextPath()+"/index.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\customer\CustomerDeleteServlet.java
package com.example.autofuelx.controller.admin.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/customer/delete")public class CustomerDeleteServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() {    customerService = new CustomerService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    customerService.deleteCustomer(id);    List<Customer> customers = customerService.getCustomers();    request.setAttribute("customers", customers);    response.sendRedirect(request.getContextPath() + "/customer/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\customer\CustomerListServlet.java
package com.example.autofuelx.controller.admin.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/customer/list")public class CustomerListServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() {    customerService = new CustomerService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    List<Customer> customers = customerService.getCustomers();    request.setAttribute("customers", customers);    request.getRequestDispatcher("/views/admin/customer/list-all.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\customer\CustomerUpdateFormServlet.java
package com.example.autofuelx.controller.admin.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/customer/edit-form")public class CustomerUpdateFormServlet extends HttpServlet {  private CustomerService CustomerService;  @Override  public void init() {    CustomerService = new CustomerService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    Customer customer = CustomerService.getCustomerById(id);    request.setAttribute("customer-update", customer);    request.getRequestDispatcher("/views/admin/customer/update.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\customer\CustomerUpdateServlet.java
package com.example.autofuelx.controller.admin.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/customer/update")public class CustomerUpdateServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() {    customerService = new CustomerService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int customerID = Integer.parseInt(request.getParameter("customerID"));    String firstName = request.getParameter("firstName");    String lastName = request.getParameter("lastName");    String email = request.getParameter("email");    String password = request.getParameter("password");    String addressNo = request.getParameter("addressNo");    String addressLane = request.getParameter("addressLane");    String addressArea = request.getParameter("addressArea");    // Create Customer object    Customer customer = new Customer();    customer.setCustomerID(customerID);    customer.setFirstName(firstName);    customer.setLastName(lastName);    customer.setEmail(email);    customer.setPassword(password);    customer.setAddressNo(addressNo);    customer.setAddressLane(addressLane);    customer.setAddressArea(addressArea);    // Update via service    customerService.updateCustomer(customer);    // Redirect to customer list page    response.sendRedirect(request.getContextPath() + "/customer/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\customer\CustomerViewServlet.java
package com.example.autofuelx.controller.admin.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/customer/view")public class CustomerViewServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() {    customerService = new CustomerService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    Customer customer = customerService.getCustomerById(id);    request.setAttribute("customer-view", customer);    request.getRequestDispatcher("/views/admin/customer/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeAddServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;@WebServlet("/admin/employee/add")public class EmployeeAddServlet extends HttpServlet {  private EmployeeService employeeService;  @Override  public void init() {    employeeService = new EmployeeService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    String firstName = request.getParameter("firstName");    String lastName = request.getParameter("lastName");    Date dateOfBirth = Date.valueOf(request.getParameter("dateOfBirth"));    double salary = Double.parseDouble(request.getParameter("salary"));    String status = request.getParameter("status");    Date hireDate = Date.valueOf(request.getParameter("hireDate"));    String addressNo = request.getParameter("addressNo");    String addressLane = request.getParameter("addressLane");    String addressArea = request.getParameter("addressArea");    String email = request.getParameter("email");    String skillSet = request.getParameter("skillSet");    String role = request.getParameter("role");    String shift = request.getParameter("shift");    String type = request.getParameter("type");    String password = request.getParameter("password");    Employee employee = new Employee();    employee.setFirstName(firstName);    employee.setLastName(lastName);    employee.setDateOfBirth(dateOfBirth);    employee.setSalary(salary);    employee.setStatus(status);    employee.setHireDate(hireDate);    employee.setAddressNo(addressNo);    employee.setAddressLane(addressLane);    employee.setAddressArea(addressArea);    employee.setType(type);    employee.setEmail(email);    employee.setPassword(password);    if (type.equals("Refuel Cashier")){      employee.setShift(shift);    }    else if (type.equals("Admin")){      employee.setRole(role);    }    else if (type.equals("Service Center Staff")){      employee.setSkillSet(skillSet);    }    employeeService.addEmployee(employee);    response.sendRedirect(request.getContextPath() + "/admin/employee/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeDeleteServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/employee/delete")public class EmployeeDeleteServlet extends HttpServlet {  private EmployeeService employeeService;  @Override  public void init() {    employeeService = new EmployeeService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("employee-ID"));    String redirectUrl = request.getParameter("redirect-url");    employeeService.deleteEmployee(id);    response.sendRedirect(request.getContextPath() + redirectUrl);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeListByTypeServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;import java.util.List;@WebServlet("/admin/employee/list-by-type")public class EmployeeListByTypeServlet extends HttpServlet {  private EmployeeService employeeService;  public void init() {    employeeService = new EmployeeService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get filter parameters from request    String type = request.getParameter("type");    String status = request.getParameter("status");    String hireDateFromStr = request.getParameter("hireDateFrom");    String hireDateToStr = request.getParameter("hireDateTo");    String minSalaryStr = request.getParameter("minSalary");    String maxSalaryStr = request.getParameter("maxSalary");    String name = request.getParameter("name");    String ageGroup = request.getParameter("ageGroup");    // Convert parameters    Date hireDateFrom = null;    Date hireDateTo = null;    Double minSalary = null;    Double maxSalary = null;    String redirectUrl = "";    String employeeType = "";    if (type.equals("customer-care-officer")){      redirectUrl = "/views/admin/employee/list-customer-care-officer.jsp";      employeeType = "Customer Care Officer";    } else if(type.equals("refuel-cashier")){      redirectUrl = "/views/admin/employee/list-refuel-cashier.jsp";      employeeType = "Refuel Cashier";    } else if (type.equals("admin")){      redirectUrl = "/views/admin/employee/list-admin.jsp";      employeeType = "Admin";    } else if (type.equals("service-center-staff")){      redirectUrl = "/views/admin/employee/list-service-center-staff.jsp";      employeeType = "Service Center Staff";    }    try {      if (hireDateFromStr != null && !hireDateFromStr.isEmpty()) {        hireDateFrom = Date.valueOf(hireDateFromStr);      }      if (hireDateToStr != null && !hireDateToStr.isEmpty()) {        hireDateTo = Date.valueOf(hireDateToStr);      }      if (minSalaryStr != null && !minSalaryStr.isEmpty()) {        minSalary = Double.parseDouble(minSalaryStr);      }      if (maxSalaryStr != null && !maxSalaryStr.isEmpty()) {        maxSalary = Double.parseDouble(maxSalaryStr);      }    } catch (Exception e) {      // Handle parsing errors      e.printStackTrace();    }    // Get filtered employees    List<Employee> employees = employeeService.getFilteredEmployees(        employeeType, status, hireDateFrom, hireDateTo,        minSalary, maxSalary, name, ageGroup    );    // Set attributes for JSP    request.setAttribute("employees", employees);    request.setAttribute("type", type);    request.setAttribute("status", status);    request.setAttribute("hireDateFrom", hireDateFromStr);    request.setAttribute("hireDateTo", hireDateToStr);    request.setAttribute("minSalary", minSalaryStr);    request.setAttribute("maxSalary", maxSalaryStr);    request.setAttribute("name", name);    request.setAttribute("ageGroup", ageGroup);    // Forward to JSP    request.getRequestDispatcher(redirectUrl).forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeListServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;import java.util.List;@WebServlet("/admin/employee/list")public class EmployeeListServlet extends HttpServlet {  private EmployeeService employeeService;  public void init() {    employeeService = new EmployeeService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get filter parameters from request    String type = request.getParameter("type");    String status = request.getParameter("status");    String hireDateFromStr = request.getParameter("hireDateFrom");    String hireDateToStr = request.getParameter("hireDateTo");    String minSalaryStr = request.getParameter("minSalary");    String maxSalaryStr = request.getParameter("maxSalary");    String name = request.getParameter("name");    String ageGroup = request.getParameter("ageGroup");    // Convert parameters    Date hireDateFrom = null;    Date hireDateTo = null;    Double minSalary = null;    Double maxSalary = null;    try {      if (hireDateFromStr != null && !hireDateFromStr.isEmpty()) {        hireDateFrom = Date.valueOf(hireDateFromStr);      }      if (hireDateToStr != null && !hireDateToStr.isEmpty()) {        hireDateTo = Date.valueOf(hireDateToStr);      }      if (minSalaryStr != null && !minSalaryStr.isEmpty()) {        minSalary = Double.parseDouble(minSalaryStr);      }      if (maxSalaryStr != null && !maxSalaryStr.isEmpty()) {        maxSalary = Double.parseDouble(maxSalaryStr);      }    } catch (Exception e) {      // Handle parsing errors      e.printStackTrace();    }    // Get filtered employees    List<Employee> employees = employeeService.getFilteredEmployees(        type, status, hireDateFrom, hireDateTo,        minSalary, maxSalary, name, ageGroup    );    // Set attributes for JSP    request.setAttribute("employees", employees);    request.setAttribute("type", type);    request.setAttribute("status", status);    request.setAttribute("hireDateFrom", hireDateFromStr);    request.setAttribute("hireDateTo", hireDateToStr);    request.setAttribute("minSalary", minSalaryStr);    request.setAttribute("maxSalary", maxSalaryStr);    request.setAttribute("name", name);    request.setAttribute("ageGroup", ageGroup);    // Forward to JSP    request.getRequestDispatcher("/views/admin/employee/list-all.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeStatusUpdateServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;@WebServlet("/admin/employee/status/update")public class EmployeeStatusUpdateServlet extends HttpServlet {  private EmployeeService employeeService;  @Override  public void init() {    employeeService = new EmployeeService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int employeeID = Integer.parseInt(request.getParameter("employee-ID"));    String status = request.getParameter("status");    String redirectUrl = request.getParameter("redirect-url");    employeeService.updateEmployeeStatus(employeeID,status);    response.sendRedirect(request.getContextPath() + redirectUrl);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeUpdateFormServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/employee/edit-form")public class EmployeeUpdateFormServlet extends HttpServlet {  private EmployeeService employeeService;  private EmployeePhoneNumberService employeePhoneNumberService;  @Override  public void init() {    employeeService = new EmployeeService();    employeePhoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int employeeID = Integer.parseInt(request.getParameter("employee-ID"));    Employee employee = employeeService.getEmployeeById(employeeID);    List<String> phoneNumbers = employeePhoneNumberService.getPhoneNumbersByEmployee(employeeID);    request.setAttribute("employee", employee);    request.setAttribute("employee-phone-numbers", phoneNumbers);    request.getRequestDispatcher("/views/admin/employee/update.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeUpdateServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;@WebServlet("/admin/employee/update")public class EmployeeUpdateServlet extends HttpServlet {  private EmployeeService employeeService;  @Override  public void init() {    employeeService = new EmployeeService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int employeeID = Integer.parseInt(request.getParameter("employeeID"));    Employee employee = employeeService.getEmployeeById(employeeID);    String firstName = request.getParameter("firstName");    String lastName = request.getParameter("lastName");    Date dateOfBirth = Date.valueOf(request.getParameter("dateOfBirth"));    double salary = Double.parseDouble(request.getParameter("salary"));    String status = request.getParameter("status");    Date hireDate = Date.valueOf(request.getParameter("hireDate"));    String addressNo = request.getParameter("addressNo");    String addressLane = request.getParameter("addressLane");    String addressArea = request.getParameter("addressArea");    String email = request.getParameter("email");    String skillSet = request.getParameter("skillSet");    String role = request.getParameter("role");    String shift = request.getParameter("shift");    String type = request.getParameter("type");    employee.setEmployeeID(employeeID);    employee.setFirstName(firstName);    employee.setLastName(lastName);    employee.setDateOfBirth(dateOfBirth);    employee.setSalary(salary);    employee.setStatus(status);    employee.setHireDate(hireDate);    employee.setAddressNo(addressNo);    employee.setAddressLane(addressLane);    employee.setAddressArea(addressArea);    employee.setEmail(email);    employee.setType(type);    if (type.equals("Refuel Cashier")){      employee.setShift(shift);    }    else if (type.equals("Admin")){      employee.setRole(role);    }    else if (type.equals("Service Center Staff")){      employee.setSkillSet(skillSet);    }    employeeService.updateEmployee(employee);    response.sendRedirect(request.getContextPath() + "/admin/employee/edit-form?employee-ID=" + employeeID);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\EmployeeViewServlet.java
package com.example.autofuelx.controller.admin.employee;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/employee/view")public class EmployeeViewServlet extends HttpServlet {  private EmployeeService employeeService;  @Override  public void init() {    employeeService = new EmployeeService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    Employee employee = employeeService.getEmployeeById(id);    request.setAttribute("employee", employee);    request.getRequestDispatcher("/views/admin/employee/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\phoneNumber\AdminEmployeePhoneNumberAddServlet.java
package com.example.autofuelx.controller.admin.employee.phoneNumber;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/admin/employee/phone-number/add")public class AdminEmployeePhoneNumberAddServlet extends HttpServlet {  private EmployeePhoneNumberService employeePhoneNumberService;  @Override  public void init() throws ServletException {    employeePhoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int employeeID = Integer.parseInt(request.getParameter("employee-ID"));    String phoneNumber = request.getParameter("phone-number");    employeePhoneNumberService.addPhoneNumber(employeeID, phoneNumber);    response.sendRedirect(request.getContextPath() + "/admin/employee/edit-form?employee-ID=" + employeeID);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\employee\phoneNumber\AdminEmployeePhoneNumberDeleteServlet.java
package com.example.autofuelx.controller.admin.employee.phoneNumber;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/admin/employee/phone-number/delete")public class AdminEmployeePhoneNumberDeleteServlet extends HttpServlet {  private EmployeePhoneNumberService employeePhoneNumberService;  @Override  public void init() throws ServletException {    employeePhoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int employeeID = Integer.parseInt(request.getParameter("employee-ID"));    String phoneNumber = request.getParameter("phone-number");    employeePhoneNumberService.deletePhoneNumber(employeeID, phoneNumber);    response.sendRedirect(request.getContextPath() + "/admin/employee/edit-form?employee-ID=" + employeeID);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\fuel\FuelFuelLevelServlet.java
package com.example.autofuelx.controller.admin.fuel;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.service.FuelService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/fuel/level")public class FuelFuelLevelServlet extends HttpServlet {  private FuelService fuelService;  @Override  public void init() throws ServletException {    fuelService = new FuelService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    List<Fuel> fuelTypes = fuelService.getAllFuels();    request.setAttribute("fuel-types", fuelTypes);    request.getRequestDispatcher("/views/admin/fuel/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\fuel\FuelInsertFormServlet.java
package com.example.autofuelx.controller.admin.fuel;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.service.FuelService;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.*;import java.util.List;@WebServlet("/admin/fuel/insert-form")public class FuelInsertFormServlet extends HttpServlet {  private FuelService fuelService;  @Override  public void init() throws ServletException {    fuelService = new FuelService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    List<Fuel> fuelTypes = fuelService.getAllFuels();    request.setAttribute("fuel-types", fuelTypes);    request.getRequestDispatcher("/views/admin/fuel/insert.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\fuel\FuelInsertServlet.java
package com.example.autofuelx.controller.admin.fuel;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.model.FuelPurchase;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.FuelPurchaseService;import com.example.autofuelx.service.FuelService;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.*;@WebServlet("/admin/fuel/insert/form")public class FuelInsertServlet extends HttpServlet {  private FuelService fuelService;  @Override  public void init() throws ServletException {    fuelService = new FuelService();  }  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    int fuelID = Integer.parseInt(request.getParameter("fuelID"));    double quantity = Double.parseDouble(request.getParameter("quantity"));    // Get vehicle    Fuel fuel = fuelService.getFuelById(fuelID);    fuel.setQuantity(fuel.getQuantity() + quantity);    fuelService.updateFuel(fuel);    response.sendRedirect(request.getContextPath() + "/refuel-cashier/fuel/refuel-form");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\fuel\FuelTypeAddServlet.java
package com.example.autofuelx.controller.admin.fuel;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.service.FuelService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.*;import java.io.IOException;@WebServlet("/admin/fuel/add")public class FuelTypeAddServlet extends HttpServlet {  FuelService fuelService = new FuelService();  @Override  public void init() throws ServletException {    fuelService = new FuelService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get form parameters    String type = request.getParameter("type");    String quantityStr = request.getParameter("quantity");    String costStr = request.getParameter("costPerLiter");    Fuel fuel = new Fuel();    fuel.setType(type);    fuel.setQuantity(Double.parseDouble(quantityStr));    fuel.setCostPerLiter(Double.parseDouble(costStr));    fuelService.addFuel(fuel);    // Redirect back to form with success message    response.sendRedirect(request.getContextPath() + "/admin/fuel/level");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceAddServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.model.Service;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/service/add")public class ServiceAddServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() {    serviceManager = new ServiceManager();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    String type = request.getParameter("type");    String description = request.getParameter("description");    double cost = Double.parseDouble(request.getParameter("cost"));    Service service = new Service();    service.setType(type);    service.setDescription(description);    service.setCost(cost);    serviceManager.addService(service);    response.sendRedirect(request.getContextPath() + "/admin/service/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceDeleteServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/service/delete")public class ServiceDeleteServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() {    serviceManager = new ServiceManager();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    serviceManager.deleteService(id);    response.sendRedirect(request.getContextPath() + "/admin/service/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceListServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.dao.ServiceDAO;import com.example.autofuelx.model.Service;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/service/list")public class ServiceListServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() throws ServletException {    serviceManager = new ServiceManager();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    // Get filter parameters    String minCostParam = request.getParameter("minCost");    String maxCostParam = request.getParameter("maxCost");    String keyword = request.getParameter("keyword");    // Parse cost parameters    Double minCost = null;    Double maxCost = null;    if (minCostParam != null && !minCostParam.isEmpty()) {      minCost = Double.parseDouble(minCostParam);    }    if (maxCostParam != null && !maxCostParam.isEmpty()) {      maxCost = Double.parseDouble(maxCostParam);    }    // Get filtered services    List<Service> services = serviceManager.getFilteredServices(minCost, maxCost, keyword);    // Set attributes    request.setAttribute("services", services);    // Forward to JSP    request.getRequestDispatcher("/views/admin/service/list-all.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceUpdateFormServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.Service;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/service/update-form")public class ServiceUpdateFormServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() {    serviceManager = new ServiceManager();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    Service service = serviceManager.getServiceByID(id);    request.setAttribute("service", service);    request.getRequestDispatcher("/views/admin/service/update.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceUpdateServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.model.Service;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.Date;@WebServlet("/admin/service/update")public class ServiceUpdateServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() {    serviceManager = new ServiceManager();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int serviceID = Integer.parseInt(request.getParameter("id"));    String type = request.getParameter("type");    String description = request.getParameter("description");    double cost = Double.parseDouble(request.getParameter("cost"));    Service service = new Service();    service.setServiceID(serviceID);    service.setType(type);    service.setDescription(description);    service.setCost(cost);    serviceManager.updateService(service);    response.sendRedirect(request.getContextPath() + "/admin/service/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\service\ServiceViewServlet.java
package com.example.autofuelx.controller.admin.service;import com.example.autofuelx.model.Service;import com.example.autofuelx.service.ServiceManager;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/service/view")public class ServiceViewServlet extends HttpServlet {  private ServiceManager serviceManager;  @Override  public void init() {    serviceManager = new ServiceManager();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int id = Integer.parseInt(request.getParameter("id"));    Service service = serviceManager.getServiceByID(id);    request.setAttribute("service", service);    request.getRequestDispatcher("/views/admin/service/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\serviceBooking\ServiceBookingAdminDashboardServlet.java
package com.example.autofuelx.controller.admin.serviceBooking;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.HashMap;import java.util.List;import java.util.Map;@WebServlet("/admin/service-booking/dashboard")public class ServiceBookingAdminDashboardServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get all bookings for statistics    List<ServiceBookingDTO> allBookings = serviceBookingService.getAllBookings();    // Count bookings by status    Map<String, Integer> statusCounts = new HashMap<>();    statusCounts.put("totalBookings", allBookings.size());    // Initialize all possible statuses with 0 count    statusCounts.put("awaitingConfirmationCount", 0);    statusCounts.put("confirmedCount", 0);    statusCounts.put("rescheduleRequiredCount", 0);    statusCounts.put("inProgressCount", 0);    statusCounts.put("awaitingPickupCount", 0);    statusCounts.put("completedCount", 0);    statusCounts.put("cancelledCount", 0);    statusCounts.put("missedAppointmentCount", 0);    // Count actual statuses    for (ServiceBookingDTO booking : allBookings) {      String status = booking.getStatus();      switch (status) {        case "Awaiting Confirmation":          statusCounts.put("awaitingConfirmationCount", statusCounts.get("awaitingConfirmationCount") + 1);          break;        case "Confirmed":          statusCounts.put("confirmedCount", statusCounts.get("confirmedCount") + 1);          break;        case "Reschedule Required":          statusCounts.put("rescheduleRequiredCount", statusCounts.get("rescheduleRequiredCount") + 1);          break;        case "In Progress":          statusCounts.put("inProgressCount", statusCounts.get("inProgressCount") + 1);          break;        case "Awaiting Pickup":          statusCounts.put("awaitingPickupCount", statusCounts.get("awaitingPickupCount") + 1);          break;        case "Completed":          statusCounts.put("completedCount", statusCounts.get("completedCount") + 1);          break;        case "Cancelled":          statusCounts.put("cancelledCount", statusCounts.get("cancelledCount") + 1);          break;        case "Missed Appointment":          statusCounts.put("missedAppointmentCount", statusCounts.get("missedAppointmentCount") + 1);          break;      }    }    // Set attributes    request.setAttribute("statusCounts", statusCounts);    // Forward to JSP    request.getRequestDispatcher("/views/admin/service-booking/dashboard.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\serviceBooking\ServiceBookingListAdminServlet.java
package com.example.autofuelx.controller.admin.serviceBooking;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet("/admin/service-booking/view")public class ServiceBookingListAdminServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  private EmployeeService employeeService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();    employeeService = new EmployeeService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    String viewStatus = request.getParameter("status");    String redirectUrl = "";    String status = "";    if (viewStatus.equals("awaiting-confirmation")) {      redirectUrl = "/views/admin/service-booking/awaiting-confirmation.jsp";      status = "Awaiting Confirmation";    } else if (viewStatus.equals("confirmed")) {      redirectUrl = "/views/admin/service-booking/confirmed.jsp";      status = "Confirmed";    } else if (viewStatus.equals("in-progress")) {      redirectUrl = "/views/admin/service-booking/in-progress.jsp";      status = "In Progress";    } else if (viewStatus.equals("missed-appointment")) {      redirectUrl = "/views/admin/service-booking/missed-appointment.jsp";      status = "Missed Appointment";    } else if (viewStatus.equals("awaiting-pickup")) {      redirectUrl = "/views/admin/service-booking/awaiting-pickup.jsp";      status = "Awaiting Pickup";    } else if (viewStatus.equals("completed")) {      redirectUrl = "/views/admin/service-booking/completed.jsp";      status = "Completed"; }    else if (viewStatus.equals("reschedule-required")) {      redirectUrl = "/views/admin/service-booking/reschedule-required.jsp";      status = "Reschedule Required";    }else if (viewStatus.equals("cancelled")) {        redirectUrl = "/views/admin/service-booking/cancelled.jsp";        status = "Cancelled";    } else {      redirectUrl = "/views/admin/service-booking/all.jsp";      status = "All";    }    List<ServiceBookingDTO> bookings;    if(!status.equals("All")) bookings = serviceBookingService.getAllBookings(status);    else bookings = serviceBookingService.getAllBookings();    List<Employee> employees = employeeService.getEmployeesByTypeStatus("Service Center Staff", "Active");    System.out.println(employees.size());    request.setAttribute("bookings", bookings);    request.setAttribute("employees", employees);    // Forward to JSP    request.getRequestDispatcher(redirectUrl).forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\admin\serviceBooking\ServiceBookingStatusUpdateAdminServlet.java
package com.example.autofuelx.controller.admin.serviceBooking;import com.example.autofuelx.model.ServiceBooking;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/admin/service-booking/update-status")public class ServiceBookingStatusUpdateAdminServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get parameters    int bookingId = Integer.parseInt(request.getParameter("bookingId"));    String status = request.getParameter("status");    String redirectUrl = request.getParameter("redirect-url");    ServiceBooking booking = serviceBookingService.getBookingByID(bookingId);    System.out.println("STAFF ID " + booking.getStaffID());    booking.setStatus(status);    if (status.equals("Confirmed")) {      int staffId = Integer.parseInt(request.getParameter("employeeId"));      booking.setStaffID(staffId);    } else if (status.equals("Awaiting Pickup")) {      double totalCost = Double.parseDouble(request.getParameter("total-cost"));      booking.setTotalCost(totalCost);    }    serviceBookingService.updateBooking(booking);    // Redirect back to bookings page    response.sendRedirect(request.getContextPath() + redirectUrl);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\CustomerDashboard.java
package com.example.autofuelx.controller.customer;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.dto.FuelPurchaseDetailDTO;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.FuelPurchase;import com.example.autofuelx.service.*;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.ArrayList;import java.util.List;@WebServlet("/customer/dashboard")public class CustomerDashboard extends HttpServlet {  VehicleService vehicleService;  @Override  public void init() throws ServletException {    vehicleService = new VehicleService();  }  @Override  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    HttpSession session = req.getSession();    Customer customer = (Customer) session.getAttribute("customer");    List<ServiceBookingDTO> activeServiceBookingDTOS = serviceBookingDTO.get  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\CustomerLoginServlet.java
package com.example.autofuelx.controller.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerPhoneNumberService;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/login")public class CustomerLoginServlet extends HttpServlet {  private CustomerService customerService;  private CustomerPhoneNumberService customerPhoneNumberService;  @Override  public void init() throws ServletException {    customerService = new CustomerService();    customerPhoneNumberService = new CustomerPhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    String email = request.getParameter("email");    String password = request.getParameter("password");    Customer customer = customerService.loginCustomer(email, password);    if (customer != null) {      // Login success      // Create session      HttpSession session = request.getSession();      session.setAttribute("customer", customer);      List<String> phoneNumbers = customerPhoneNumberService.getPhoneNumbersByCustomer(customer.getCustomerID());      session.setAttribute("phone-numbers", phoneNumbers);      response.sendRedirect(request.getContextPath() + "/views/customer/profile.jsp"); // Redirect to welcome page    } else {      // Login failed      request.setAttribute("login-error-message", "Invalid email or password");      request.getRequestDispatcher("/views/customer/login.jsp").forward(request, response);    }  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\CustomerRegisterServlet.java
package com.example.autofuelx.controller.customer;import java.io.IOException;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;@WebServlet("/customer/register")public class CustomerRegisterServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() throws ServletException {    customerService = new CustomerService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get form data    String firstName = request.getParameter("firstName");    String lastName = request.getParameter("lastName");    String email = request.getParameter("email");    // NEW    String password = request.getParameter("password");    String addressNo = request.getParameter("addressNo");    String addressLane = request.getParameter("addressLane");    String addressArea = request.getParameter("addressArea");    Customer c = customerService.getCustomerByEmail(email);    System.out.println("Regiter User : " + c );    if (c != null){      request.setAttribute("register-error-message", "Email Already in use..!");      request.getRequestDispatcher("/views/customer/register.jsp").forward(request, response);      return;    }    // Create Customer object    Customer customer = new Customer();    customer.setFirstName(firstName);    customer.setLastName(lastName);    customer.setEmail(email);    // NEW    customer.setPassword(password);    customer.setAddressNo(addressNo);    customer.setAddressLane(addressLane);    customer.setAddressArea(addressArea);    // Call service to save    boolean isRegistered = customerService.registerCustomer(customer);    if (isRegistered) {      response.sendRedirect(request.getContextPath() + "/views/customer/registration-success.jsp");    } else {      request.setAttribute("register-error-message", "Registration failed !");      request.getRequestDispatcher("/views/customer/register.jsp").forward(request, response);    }  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\ComplaintCreateServlet.java
package com.example.autofuelx.controller.customer.complaint;import java.io.*;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.ComplaintService;import jakarta.servlet.*;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.*;@WebServlet("/customer/complaint/create")public class ComplaintCreateServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get logged user    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    // check user logged in ot not    if (customer==null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");    }    else {      response.sendRedirect(request.getContextPath() + "/customer/complaint/list");    }  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get logged user    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    if (customer==null) {      response.sendRedirect("/views/customer/login.jsp");    }    // Catch data    String title = request.getParameter("title");    String description = request.getParameter("description");    // Create complaint Object    Complaint complaint = new Complaint();    complaint.setTitle(title);    complaint.setDescription(description);    complaint.setStatus("Open");    complaint.setCustomerID(customer.getCustomerID());    complaintService.submitComplaint(complaint);    response.sendRedirect(request.getContextPath() + "/customer/complaint/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\ComplaintListServlet.java
package com.example.autofuelx.controller.customer.complaint;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.ComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/complaint/list")public class ComplaintListServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get logged-in user    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    List<ComplaintReplyDTO> complaints = complaintService.getComplaintsWithReplyByCustomerId(customer.getCustomerID());    request.setAttribute("complaints", complaints);    request.getRequestDispatcher("/views/customer/complaint/list.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\ComplaintUpdateFormServlet.java
package com.example.autofuelx.controller.customer.complaint;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.service.ComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/customer/complaint/update-form")public class ComplaintUpdateFormServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    Complaint complaint = complaintService.getComplaintByComplaintID(complaintID);    request.setAttribute("complaint", complaint);    request.getRequestDispatcher("/views/customer/complaint/update.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\ComplaintUpdateServlet.java
package com.example.autofuelx.controller.customer.complaint;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.ComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/customer/complaint/update")public class ComplaintUpdateServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Catch data    Customer customer = (Customer) request.getSession().getAttribute("customer");    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    String title = request.getParameter("title");    String description = request.getParameter("description");    Complaint complaint = new Complaint();    complaint.setCustomerID(customer.getCustomerID());    complaint.setComplaintID(complaintID);    complaint.setTitle(title);    complaint.setDescription(description);    complaint.setStatus("Open");    complaintService.updateComplaint(complaint);    response.sendRedirect(request.getContextPath() + "/customer/complaint/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\ComplaintViewServlet.java
package com.example.autofuelx.controller.customer.complaint;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.ReplyComplaint;import com.example.autofuelx.service.ComplaintService;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.service.ReplyComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/customer/complaint/view")public class ComplaintViewServlet extends HttpServlet {  private ComplaintService complaintService;  private ReplyComplaintService replyComplaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();    replyComplaintService = new ReplyComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Catch data    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    ComplaintReplyDTO complaintDTO = complaintService.getComplaintReplyDTOByComplaintID(complaintID);    // Get reply complaint    ReplyComplaint replyComplaint = replyComplaintService.getReplyComplaintByReplyComplaintID(complaintID);    if (replyComplaint != null) {      // User saw the customer care reply      replyComplaintService.updateReplyComplaintStatus(replyComplaint.getReplyComplaintID(), "Closed");    }    request.setAttribute("complaintReplyDTO", complaintDTO);    request.getRequestDispatcher( "/views/customer/complaint/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\complaint\CustomerComplaintDeleteServlet.java
package com.example.autofuelx.controller.customer.complaint;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.ComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/customer/complaint/delete")public class CustomerComplaintDeleteServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Catch data    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    complaintService.deleteComplaint(complaintID);    response.sendRedirect(request.getContextPath() + "/customer/complaint/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\customer\CustomerDeleteServlet.java
package com.example.autofuelx.controller.customer.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/customer/delete")public class CustomerDeleteServlet extends HttpServlet {  private CustomerService customerService;  @Override  public void init() {    customerService = new CustomerService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    customerService.deleteCustomer(customer.getCustomerID());    response.sendRedirect(request.getContextPath() + "/views/customer/profile.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\customer\CustomerUpdateServlet.java
package com.example.autofuelx.controller.customer.customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/customer/customer/update")public class CustomerUpdateServlet extends HttpServlet {  private CustomerService CustomerService;  @Override  public void init() {    CustomerService = new CustomerService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    // gET LOGGED IN Customer    Customer customer = (Customer) session.getAttribute("customer");    String firstName = request.getParameter("firstName");    String lastName = request.getParameter("lastName");    String email = request.getParameter("email");    String password = request.getParameter("password");    String addressNo = request.getParameter("addressNo");    String addressLane = request.getParameter("addressLane");    String addressArea = request.getParameter("addressArea");    // Create Customer object    customer.setCustomerID(customer.getCustomerID());    customer.setFirstName(firstName);    customer.setLastName(lastName);    customer.setEmail(email);    customer.setPassword(password);    customer.setAddressNo(addressNo);    customer.setAddressLane(addressLane);    customer.setAddressArea(addressArea);    // Update customer details in DB    CustomerService.updateCustomer(customer);    session.setAttribute("customer", customer);    response.sendRedirect(request.getContextPath() + "/views/customer/profile.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\feedback\FeedbackCreateServlet.java
package com.example.autofuelx.controller.customer.feedback;import java.io.*;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Feedback;import com.example.autofuelx.service.FeedbackService;import jakarta.servlet.*;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.*;@WebServlet("/customer/feedback/create")public class FeedbackCreateServlet extends HttpServlet {  private FeedbackService feedbackService;  @Override  public void init() throws ServletException {    feedbackService = new FeedbackService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Catch data    int rate = Integer.parseInt(request.getParameter("title"));    String message = request.getParameter("message");    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    Feedback feedback = new Feedback();    feedback.setRate(rate);    feedback.setMessage(message);    feedback.setCustomerID(customer.getCustomerID());    feedbackService.submitFeedback(feedback);    response.sendRedirect("customer/feedback/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\feedback\FeedbackDeleteServlet.java
package com.example.autofuelx.controller.customer.feedback;import java.io.*;import com.example.autofuelx.service.FeedbackService;import jakarta.servlet.*;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.*;@WebServlet("/customer/feedback/delete")public class FeedbackDeleteServlet extends HttpServlet {  private FeedbackService feedbackService;  @Override  public void init() throws ServletException {    feedbackService = new FeedbackService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Catch data    int feedbackID = Integer.parseInt(request.getParameter("id"));    // Delete feedback    feedbackService.deleteComplaint(feedbackID);    response.sendRedirect("customer/feedback/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\Fuel\UsageHistoryViewServlet.java
package com.example.autofuelx.controller.customer.Fuel;import com.example.autofuelx.dto.FuelPurchaseDetailDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.FuelPurchaseService;import com.example.autofuelx.service.FuelService;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/fuel/history")public class UsageHistoryViewServlet extends HttpServlet {  private FuelPurchaseService fuelPurchaseService;  private VehicleService vehicleService;  private FuelService fuelService;  @Override  public void init() throws ServletException {    fuelPurchaseService = new FuelPurchaseService();    vehicleService = new VehicleService();    fuelService = new FuelService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    HttpSession session = request.getSession();    Customer loggedCustomer = (Customer) session.getAttribute("customer");    if (loggedCustomer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    // read filter parameters from request    String durationDateStartFilter = request.getParameter("duration-date-start-filter");    String durationDateEndFilter = request.getParameter("duration-date-end-filter");    String vehicleTypeFilter = request.getParameter("vehicle-type-filter");    String vehicleFilter = request.getParameter("vehicle-filter"); // e.g., vehicle ID as String    String fuelTypeFilter = request.getParameter("fuel-type-filter"); // e.g., fuel ID as String    request.setAttribute("duration-date-start-filter", durationDateStartFilter);    request.setAttribute("duration-date-end-filter", durationDateEndFilter);    request.setAttribute("vehicle-type-filter", vehicleTypeFilter);    request.setAttribute("vehicle-filter", vehicleFilter);    request.setAttribute("fuel-type-filter", fuelTypeFilter);    List<String> vehicleTypes = vehicleService.getVehicleTypesByCustomerID(loggedCustomer.getCustomerID());    List<FuelPurchaseDetailDTO> fuelUsageDetails = fuelPurchaseService.getFuelPurchaseDetailsByCustomerID(        loggedCustomer.getCustomerID(), durationDateStartFilter, durationDateEndFilter, vehicleTypeFilter, vehicleFilter, fuelTypeFilter);    List<Fuel> fuels = fuelService.getAllFuels();    List<Vehicle> vehicles = vehicleService.getVehiclesByCustomerID(loggedCustomer.getCustomerID());    request.setAttribute("fuel-usage-details", fuelUsageDetails);    request.setAttribute("vehicle-types", vehicleTypes);    request.setAttribute("vehicles", vehicles);    request.setAttribute("fuels", fuels);    request.getRequestDispatcher("/views/customer/fuel/history.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\phoneNumber\CustomerPhoneNumberAddServlet.java
package com.example.autofuelx.controller.customer.phoneNumber;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerPhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/phone-number/add")public class CustomerPhoneNumberAddServlet extends HttpServlet {  private CustomerPhoneNumberService customerPhoneNumberService;  @Override  public void init() throws ServletException {    customerPhoneNumberService = new CustomerPhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int customerID = Integer.parseInt(request.getParameter("customerID"));    String phoneNumber = request.getParameter("phoneNumber");    boolean success = customerPhoneNumberService.addPhoneNumber(customerID, phoneNumber);    if (success) {      request.getSession().setAttribute("message", "Phone number added successfully.");    } else {      request.getSession().setAttribute("error", "Failed to add phone number.");    }    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    List<String> phoneNumbers = customerPhoneNumberService.getPhoneNumbersByCustomer(customer.getCustomerID());    session.setAttribute("phone-numbers", phoneNumbers);    response.sendRedirect(request.getContextPath() + "/views/customer/update.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\phoneNumber\CustomerPhoneNumberDeleteServlet.java
package com.example.autofuelx.controller.customer.phoneNumber;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.CustomerPhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/phone-number/delete")public class CustomerPhoneNumberDeleteServlet extends HttpServlet {  private CustomerPhoneNumberService customerPhoneNumberService;  @Override  public void init() throws ServletException {    customerPhoneNumberService = new CustomerPhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    int customerID = Integer.parseInt(request.getParameter("customerID"));    String phoneNumber = request.getParameter("phoneNumber");    boolean success = customerPhoneNumberService.deletePhoneNumber(customerID, phoneNumber);    if (success) {      request.getSession().setAttribute("message", "Phone number deleted successfully.");    } else {      request.getSession().setAttribute("error", "Failed to delete phone number.");    }    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    List<String> phoneNumbers = customerPhoneNumberService.getPhoneNumbersByCustomer(customer.getCustomerID());    session.setAttribute("phone-numbers", phoneNumbers);    response.sendRedirect(request.getContextPath() + "/views/customer/update.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\BookingStatusUpdateCustomerServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.model.ServiceBooking;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/user/service-booking/update-status")public class BookingStatusUpdateCustomerServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get parameters    int bookingId = Integer.parseInt(request.getParameter("booking-ID"));    String status = request.getParameter("status");    String redirectUrl = request.getParameter("redirect-url");    ServiceBooking booking = serviceBookingService.getBookingByID(bookingId);    System.out.println(booking.getStaffID());    booking.setStatus(status);    serviceBookingService.updateBooking(booking);    // Redirect back to bookings page    response.sendRedirect(request.getContextPath() + redirectUrl);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\HistoryBookingHistoryServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.ServiceBookingService;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.Arrays;import java.util.List;@WebServlet("/customer/service-booking/history")public class HistoryBookingHistoryServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  private VehicleService vehicleService ;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();    vehicleService = new VehicleService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    HttpSession session = request.getSession();    Customer loggedCustomer = (Customer) session.getAttribute("customer");    if (loggedCustomer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    // Get filter parameters    String startDate = request.getParameter("start-date");    String endDate = request.getParameter("end-date");    String vehicleType = request.getParameter("vehicle-type");    String vehicle = request.getParameter("vehicle");    String status = request.getParameter("status");    String minCost = request.getParameter("min-cost");    String maxCost = request.getParameter("max-cost");    String keyword = request.getParameter("keyword");    // Set attributes for the form to remember selections    request.setAttribute("start-date", startDate);    request.setAttribute("end-date", endDate);    request.setAttribute("vehicle-type", vehicleType);    request.setAttribute("vehicle", vehicle);    request.setAttribute("status", status);    request.setAttribute("min-cost", minCost);    request.setAttribute("max-cost", maxCost);    request.setAttribute("keyword", keyword);    // Get data for dropdowns    List<String> vehicleTypes = vehicleService.getVehicleTypesByCustomerID(loggedCustomer.getCustomerID());    List<Vehicle> vehicles = vehicleService.getVehiclesByCustomerID(loggedCustomer.getCustomerID());    List<String> statuses = Arrays.asList("All", "Awaiting Confirmation", "Confirmed", "In Progress",        "Completed", "Missed Appointment", "Awaiting Pickup", "Cancelled", "Reschedule Required");    // Get filtered bookings    List<ServiceBookingDTO> bookings = serviceBookingService.getBookingsByCustomerWithFilters(        loggedCustomer.getCustomerID(),        startDate,        endDate,        vehicleType,        vehicle,        status,        minCost,        maxCost,        keyword    );    request.setAttribute("vehicleTypes", vehicleTypes);    request.setAttribute("vehicles", vehicles);    request.setAttribute("statuses", statuses);    request.setAttribute("bookings", bookings);    request.getRequestDispatcher("/views/customer/service-booking/history.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\ServiceBookingFormServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Service;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.ServiceManager;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/service-booking/form")public class ServiceBookingFormServlet extends HttpServlet {  private VehicleService vehicleService;  private ServiceManager serviceManager;  @Override  public void init() throws ServletException {    vehicleService = new VehicleService();    serviceManager = new ServiceManager();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    HttpSession session = request.getSession();    Customer loggedCustomer = (Customer) session.getAttribute("customer");    if (loggedCustomer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    List<Vehicle> vehicles = vehicleService.getVehiclesByCustomerID(loggedCustomer.getCustomerID());    List<Service> services = serviceManager.getAllServices();    request.setAttribute("vehicles", vehicles);    request.setAttribute("services", services);    request.getRequestDispatcher("/views/customer/service-booking/form.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\ServiceBookingListCustomerServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/service-booking/list")public class ServiceBookingListCustomerServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    String status = request.getParameter("status");    HttpSession session = request.getSession();    Customer loggedCustomer = (Customer) session.getAttribute("customer");    if (loggedCustomer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    List<ServiceBookingDTO> serviceBookings = null;    String redirectUrl = null;    if ("active".equals(status)) {      serviceBookings = serviceBookingService.getActiveBookingsByCustomerID(loggedCustomer.getCustomerID());      redirectUrl = "/views/customer/service-booking/active.jsp";    } else if ("missed".equals(status)) {      serviceBookings = serviceBookingService.getBookingsByCustomerIDAndStatus(loggedCustomer.getCustomerID(), "Missed Appointment");      redirectUrl = "/views/customer/service-booking/missed.jsp";    }    request.setAttribute("bookings", serviceBookings);    request.getRequestDispatcher(redirectUrl).forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\ServiceBookingRescheduleServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.model.ServiceBooking;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.time.LocalDate;import java.time.LocalTime;@WebServlet("/user/service-booking/reschedule")public class ServiceBookingRescheduleServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get parameters    int bookingId = Integer.parseInt(request.getParameter("booking-ID"));    String newDateStr = request.getParameter("new-date");    String newTimeStr = request.getParameter("new-time");    String redirectUrl = request.getParameter("redirect-url");    ServiceBooking booking = serviceBookingService.getBookingByID(bookingId);    booking.setStatus("Awaiting Confirmation");    LocalDate newDate = LocalDate.parse(newDateStr);    LocalTime newTime = LocalTime.parse(newTimeStr);    booking.setBookingDate(newDate);    booking.setBookingTime(newTime);    serviceBookingService.updateBooking(booking);    // Redirect back to bookings page    response.sendRedirect(request.getContextPath() + redirectUrl);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\serviceBooking\ServiceBookingServlet.java
package com.example.autofuelx.controller.customer.serviceBooking;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.ServiceBooking;import com.example.autofuelx.service.ServiceBookingService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.time.LocalDate;import java.time.LocalTime;@WebServlet("/customer/service-booking/create")public class ServiceBookingServlet extends HttpServlet {  private ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    // Get form parameters    int vehicleId = Integer.parseInt(request.getParameter("vehicle-id"));    int serviceId = Integer.parseInt(request.getParameter("service-id"));    String date = request.getParameter("booking-date");    String time = request.getParameter("booking-time");    // Get logged-in customer from session    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    // Create new service bookings    ServiceBooking booking = new ServiceBooking();    booking.setVehicleID(vehicleId);    booking.setServiceID(serviceId);    booking.setBookingDate(LocalDate.parse(date));    booking.setBookingTime(LocalTime.parse(time));    booking.setCustomerID(customer.getCustomerID());    booking.setStatus("Awaiting Confirmation");    // Save booking to database    serviceBookingService.bookService(booking);    // Redirect to confirmation page    response.sendRedirect(request.getContextPath() + "/views/customer/service-booking/success.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\vehicle\VehicleAddServlet.java
package com.example.autofuelx.controller.customer.vehicle;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;@WebServlet("/customer/vehicle/add")public class VehicleAddServlet extends HttpServlet {  private VehicleService vehicleService;  @Override  public void init() {    vehicleService = new VehicleService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    if (customer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    String plateNumber = request.getParameter("plateNumber");    // Check vehicle already exist or not    Vehicle v = vehicleService.getVehicleByPlateNo(plateNumber);    if (v != null) {      request.setAttribute("errorMessage", "Vehicle already exists..!");      request.getRequestDispatcher("/views/customer/vehicle/add.jsp").forward(request, response); // Redirect to vehicle add page      return;    }    try {      String type = request.getParameter("type");      String model = request.getParameter("model");      String color = request.getParameter("color");      Date registrationDate = new SimpleDateFormat("yyyy-MM-dd")          .parse(request.getParameter("registrationDate"));      Vehicle vehicle = new Vehicle();      vehicle.setPlateNumber(plateNumber);      vehicle.setType(type);      vehicle.setModel(model);      vehicle.setColor(color);      vehicle.setCustomerID(customer.getCustomerID());      vehicle.setRegistrationDate(registrationDate);      vehicleService.addVehicle(vehicle);    }catch (Exception e){      request.setAttribute("errorMessage", "Something Went Wrong..!");      response.sendRedirect(request.getContextPath() + "/views/customer/vehicle/add.jsp"); // Redirect to vehicle add page    }    response.sendRedirect(request.getContextPath() + "/customer/vehicle/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\vehicle\VehicleDeleteServlet.java
package com.example.autofuelx.controller.customer.vehicle;import com.example.autofuelx.model.Customer;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/customer/vehicle/delete")public class VehicleDeleteServlet extends HttpServlet {  private VehicleService vehicleService;  @Override  public void init() {    vehicleService = new VehicleService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws IOException {    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    if (customer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    int vehicleID = Integer.parseInt(request.getParameter("vehicleID"));    vehicleService.deleteVehicle(vehicleID, customer.getCustomerID());    response.sendRedirect(request.getContextPath() + "/customer/vehicle/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\vehicle\VehicleListServlet.java
package com.example.autofuelx.controller.customer.vehicle;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer/vehicle/list")public class VehicleListServlet extends HttpServlet {  private VehicleService vehicleService;  @Override  public void init() {    vehicleService = new VehicleService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws IOException, ServletException {    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    if (customer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    List<Vehicle> vehicles = vehicleService.getVehiclesByCustomerID(customer.getCustomerID());    request.setAttribute("vehicles", vehicles);    for (Vehicle vehicle : vehicles) {      System.out.println(vehicle.getType());    }    request.getRequestDispatcher("/views/customer/vehicle/list.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\vehicle\VehicleUpdateFormServlet.java
package com.example.autofuelx.controller.customer.vehicle;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/customer/vehicle/update-form")public class VehicleUpdateFormServlet extends HttpServlet {  private VehicleService vehicleService;  @Override  public void init() {    vehicleService = new VehicleService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws IOException, ServletException {    int vehicleID = Integer.parseInt(request.getParameter("vehicleID"));    Vehicle vehicle = vehicleService.getVehicleByID(vehicleID);    request.setAttribute("vehicle-update", vehicle);    request.getRequestDispatcher("/views/customer/vehicle/update.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customer\vehicle\VehicleUpdateServlet.java
package com.example.autofuelx.controller.customer.vehicle;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.VehicleService;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;@WebServlet("/customer/vehicle/update")public class VehicleUpdateServlet extends HttpServlet {  private VehicleService vehicleService;  @Override  public void init() {    vehicleService = new VehicleService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws IOException {    HttpSession session = request.getSession();    Customer customer = (Customer) session.getAttribute("customer");    if (customer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return;    }    try {      int vehicleID = Integer.parseInt(request.getParameter("vehicleID"));      String plateNumber = request.getParameter("plateNumber");      String type = request.getParameter("type");      String model = request.getParameter("model");      String color = request.getParameter("color");      Date registrationDate = new SimpleDateFormat("yyyy-MM-dd")          .parse(request.getParameter("registrationDate"));      Vehicle vehicle = new Vehicle();      vehicle.setVehicleID(vehicleID);      vehicle.setPlateNumber(plateNumber);      vehicle.setType(type);      vehicle.setModel(model);      vehicle.setColor(color);      vehicle.setCustomerID(customer.getCustomerID());      vehicle.setRegistrationDate(registrationDate);      vehicleService.updateVehicle(vehicle);    } catch (Exception e) {      e.printStackTrace();    }    response.sendRedirect(request.getContextPath() + "/customer/vehicle/list");  }}

File Path: src\main\java\com\example\autofuelx\controller\customerCare\ComplaintListServlet.java
package com.example.autofuelx.controller.customerCare;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.ComplaintService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/customer-care/complaint/list")public class ComplaintListServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response, "Customer Care Officer");    if (employee == null) return;    // read filter parameters from request    String keyword = request.getParameter("keyword");    String lastUpdateDate = request.getParameter("last-update-date");    String customerEmail = request.getParameter("customer-email");    String status = request.getParameter("status");    List<ComplaintReplyDTO> complaints = complaintService.getComplaintReplyDTOsFiltered(keyword, lastUpdateDate, customerEmail, status);    request.setAttribute("complaints", complaints);    request.setAttribute("status", status);    request.setAttribute("last-update-date", lastUpdateDate);    request.setAttribute("customer-email", customerEmail);    request.setAttribute("keyword", keyword);    request.getRequestDispatcher("/views/customer-care/complaint/list.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customerCare\ComplaintViewEmployeeServlet.java
package com.example.autofuelx.controller.customerCare;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.ComplaintService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/customer-care/complaint/view")public class ComplaintViewEmployeeServlet extends HttpServlet {  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    complaintService = new ComplaintService();  }  @Override  protected void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response, "Customer Care Officer");    if (employee == null) return;    // Catch data    int complaintID = Integer.parseInt(request.getParameter("complaintID"));        ComplaintReplyDTO complaintDTO = complaintService.getComplaintReplyDTOByComplaintID(complaintID);    request.setAttribute("complaintReplyDTO", complaintDTO);    request.getRequestDispatcher( "/views/customer-care/complaint/view.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\customerCare\CreateReplyComplaint.java
package com.example.autofuelx.controller.customerCare;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.ReplyComplaint;import com.example.autofuelx.service.ComplaintService;import com.example.autofuelx.service.ReplyComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/customer-care/complaint/create")public class CreateReplyComplaint extends HttpServlet {  private ReplyComplaintService replyComplaintService;  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    replyComplaintService = new ReplyComplaintService();    complaintService = new ComplaintService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    Employee employee = (Employee) session.getAttribute("employee");    // Catch data    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    String replyTitle = request.getParameter("replyTitle");    String replyDescription = request.getParameter("replyDescription");    ReplyComplaint replyComplaint = new ReplyComplaint();    replyComplaint.setComplaintID(complaintID);    replyComplaint.setTitle(replyTitle);    replyComplaint.setDescription(replyDescription);    replyComplaint.setStaffID(employee.getEmployeeID());    replyComplaint.setStatus("Open");    replyComplaintService.submitReplyComplaint(replyComplaint);    // set user complaint as viewed by customer care    complaintService.updateComplaintStatus(complaintID, "Closed");    response.sendRedirect(request.getContextPath() + "/customer-care/complaint/view?complaintID=" + complaintID);  }}

File Path: src\main\java\com\example\autofuelx\controller\customerCare\UpdateReplyComplaint.java
package com.example.autofuelx.controller.customerCare;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.ReplyComplaint;import com.example.autofuelx.service.ComplaintService;import com.example.autofuelx.service.ReplyComplaintService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;@WebServlet("/customer-care/complaint/update")public class UpdateReplyComplaint extends HttpServlet {  private ReplyComplaintService replyComplaintService;  private ComplaintService complaintService;  @Override  public void init() throws ServletException {    replyComplaintService = new ReplyComplaintService();    complaintService = new ComplaintService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    Employee employee = (Employee) session.getAttribute("employee");    // Catch data    int complaintID = Integer.parseInt(request.getParameter("complaintID"));    String replyTitle = request.getParameter("replyTitle");    String replyDescription = request.getParameter("replyDescription");    ReplyComplaint replyComplaint = replyComplaintService.getReplyComplaintByComplaintID(complaintID);    replyComplaint.setTitle(replyTitle);    replyComplaint.setDescription(replyDescription);    replyComplaint.setStaffID(employee.getEmployeeID());    replyComplaint.setStatus("Open");    replyComplaintService.updateReplyComplaint(replyComplaint);    // set user complaint as viewed by customer care    complaintService.updateComplaintStatus(complaintID, "Closed");    response.sendRedirect(request.getContextPath() + "/customer-care/complaint/view?complaintID=" + complaintID);  }}

File Path: src\main\java\com\example\autofuelx\controller\employee\EmployeeLoginServlet.java
package com.example.autofuelx.controller.employee;import java.io.IOException;import java.util.List;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import com.example.autofuelx.service.EmployeeService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;@WebServlet("/employee/login")public class EmployeeLoginServlet extends HttpServlet {  private EmployeeService employeeService;  private EmployeePhoneNumberService employeePhoneNumberService;  public void init() {    employeePhoneNumberService = new EmployeePhoneNumberService();    employeeService = new EmployeeService();  }  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    String email = request.getParameter("email");    String password = request.getParameter("password");    String type = request.getParameter("type");    System.out.println(email);    System.out.println(password);    System.out.println(type);    HttpSession session = request.getSession();    Employee employee = employeeService.validateEmployee(email, password, type);    String redirectUrl = "";    if ("Customer Care Officer".equals(type)) redirectUrl = "/customer-care/complaint/list";    else if ("Admin".equals(type)) redirectUrl = "/admin/service-booking/dashboard";    else if ("Refuel Cashier".equals(type)) redirectUrl = "/refuel-cashier/fuel/refuel-form";    else if ("Service Center Staff".equals(type)) redirectUrl = "/service-center/service-booking/assigned";    if (employee != null) {      System.out.println("Logged : " + employee.getRole());      session.setAttribute("type", type);      List<String> phoneNumbers = employeePhoneNumberService.getPhoneNumbersByEmployee(employee.getEmployeeID());      session.setAttribute("phone-numbers", phoneNumbers);      session.setAttribute("employee", employee);      response.sendRedirect( request.getContextPath() + redirectUrl);    } else {      // Login failed      request.setAttribute("error-message", "Invalid email or password");      request.getRequestDispatcher( "/views/employee/login.jsp").forward(request, response);    }  }}

File Path: src\main\java\com\example\autofuelx\controller\employee\EmployeeUpdateServlet.java
package com.example.autofuelx.controller.employee;import java.io.IOException;import java.sql.Date;import java.util.ArrayList;import java.util.List;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import com.example.autofuelx.service.EmployeeService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;@WebServlet("/employee/update")public class EmployeeUpdateServlet extends HttpServlet {  private EmployeeService employeeService;  private EmployeePhoneNumberService phoneNumberService;  @Override  public void init() {    employeeService = new EmployeeService();    phoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response);    if (employee == null) return;    try {      // --- Common Fields ---      employee.setFirstName(request.getParameter("firstName"));      employee.setLastName(request.getParameter("lastName"));      employee.setDateOfBirth(Date.valueOf(request.getParameter("dateOfBirth")));      employee.setEmail(request.getParameter("email"));      employee.setStatus(request.getParameter("status"));      employee.setHireDate(Date.valueOf(request.getParameter("hireDate")));      employee.setSalary(Double.parseDouble(request.getParameter("salary")));      employee.setAddressNo(request.getParameter("addressNo"));      employee.setAddressLane(request.getParameter("addressLane"));      employee.setAddressArea(request.getParameter("addressArea"));      employee.setPassword(request.getParameter("password"));      // --- Role-Specific ---      String role = employee.getRole();      if ("Service Center Staff".equals(role)) {        employee.setSkillSet(request.getParameter("skillSet"));      } else if ("Refuel Cashier".equals(role)) {        employee.setShift(request.getParameter("shift"));      } else if ("Admin".equals(role)) {        employee.setRole(request.getParameter("adminRole"));      }      // Customer Care Officer → no extra fields      // update Employee in DB      employeeService.updateEmployee(employee);      // update session      HttpSession session = request.getSession();      session.setAttribute("employee", employee);      // Redirect back to profile page      response.sendRedirect(request.getContextPath() + "/views/employee/profile.jsp");    } catch (Exception e) {      e.printStackTrace();      request.setAttribute("errorMessage", "Error updating profile: " + e.getMessage());      request.getRequestDispatcher("/views/employee/edit.jsp").forward(request, response);    }  }}

File Path: src\main\java\com\example\autofuelx\controller\employee\phoneNumber\EmployeePhoneNumberAddServlet.java
package com.example.autofuelx.controller.employee.phoneNumber;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/employee/phone-number/add")public class EmployeePhoneNumberAddServlet extends HttpServlet {  private EmployeePhoneNumberService employeePhoneNumberService;  @Override  public void init() throws ServletException {    employeePhoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    Employee employee = (Employee) session.getAttribute("employee");    int employeeID = employee.getEmployeeID();    String phoneNumber = request.getParameter("phone-number");    boolean success = employeePhoneNumberService.addPhoneNumber(employeeID, phoneNumber);    if (success) {      request.getSession().setAttribute("message", "Phone number deleted successfully.");    } else {      request.getSession().setAttribute("error", "Failed to delete phone number.");    }    List<String> phoneNumbers = employeePhoneNumberService.getPhoneNumbersByEmployee(employee.getEmployeeID());    session.setAttribute("phone-numbers", phoneNumbers);    response.sendRedirect(request.getContextPath() + "/views/employee/update.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\employee\phoneNumber\EmployeePhoneNumberDeleteServlet.java
package com.example.autofuelx.controller.employee.phoneNumber;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.EmployeePhoneNumberService;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;import java.util.List;@WebServlet("/employee/phone-number/delete")public class EmployeePhoneNumberDeleteServlet extends HttpServlet {  private EmployeePhoneNumberService employeePhoneNumberService;  @Override  public void init() throws ServletException {    employeePhoneNumberService = new EmployeePhoneNumberService();  }  @Override  protected void doPost(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException {    HttpSession session = request.getSession();    Employee employee = (Employee) session.getAttribute("employee");    int employeeID = employee.getEmployeeID();    String phoneNumber = request.getParameter("phone-number");    boolean success = employeePhoneNumberService.deletePhoneNumber(employeeID, phoneNumber);    if (success) {      request.getSession().setAttribute("message", "Phone number deleted successfully.");    } else {      request.getSession().setAttribute("error", "Failed to delete phone number.");    }        List<String> phoneNumbers = employeePhoneNumberService.getPhoneNumbersByEmployee(employee.getEmployeeID());    session.setAttribute("phone-numbers", phoneNumbers);    response.sendRedirect(request.getContextPath() + "/views/employee/update.jsp");  }}

File Path: src\main\java\com\example\autofuelx\controller\refuelCashier\FuelPurchaseServlet.java
package com.example.autofuelx.controller.refuelCashier;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.FuelPurchase;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.service.FuelPurchaseService;import com.example.autofuelx.service.VehicleService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.*;@WebServlet("/refuel-cashier/fuel/purchase")public class FuelPurchaseServlet extends HttpServlet {  private FuelPurchaseService fuelPurchaseService;  private VehicleService vehicleService;  @Override  public void init() throws ServletException {    fuelPurchaseService = new FuelPurchaseService();    vehicleService = new VehicleService();  }  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response, "Refuel Cashier");    if (employee == null) return;    String plateNumber = request.getParameter("plateNumber");    int fuelID= Integer.parseInt(request.getParameter("fuelID"));    double quantity = Double.parseDouble(request.getParameter("quantity"));    // Get vehicle    Vehicle vehicle = vehicleService.getVehicleByPlateNo(plateNumber);    double purchaseCost = fuelPurchaseService.getPurchaseCost(fuelID, quantity);    FuelPurchase fuelPurchase = new FuelPurchase();    fuelPurchase.setVehicleID(vehicle.getVehicleID());    fuelPurchase.setFuelID(fuelID);    fuelPurchase.setQuantity(quantity);    fuelPurchase.setCustomerID(vehicle.getCustomerID());    fuelPurchase.setTotalCost(purchaseCost);    // FuelPurchaseServlet after saving purchase    try {      fuelPurchaseService.makePurchase(fuelPurchase);      // use query param to pass status      response.sendRedirect(request.getContextPath() + "/refuel-cashier/fuel/refuel-form?purchase-status=success");    } catch (Exception e) {      response.sendRedirect(request.getContextPath() + "/refuel-cashier/fuel/refuel-form?purchase-status=failed");    }  }}

File Path: src\main\java\com\example\autofuelx\controller\refuelCashier\RefuelFormServlet.java
package com.example.autofuelx.controller.refuelCashier;import com.example.autofuelx.model.Employee;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.service.FuelService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.*;import java.util.List;@WebServlet("/refuel-cashier/fuel/refuel-form")public class RefuelFormServlet extends HttpServlet {  private FuelService fuelService;  @Override  public void init() throws ServletException {    fuelService = new FuelService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response, "Refuel Cashier");    if (employee == null) return;    List<Fuel> fuelTypes = fuelService.getAllFuels();    request.setAttribute("fuel-types", fuelTypes);    request.getRequestDispatcher("/views/refuel-cashier/fuel/refuel-form.jsp?refuel-form?purchase-status=" + request.getParameter("purchase-status")).forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\controller\serviceCenter\AssignJobListServlet.java
package com.example.autofuelx.controller.serviceCenter;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.Employee;import com.example.autofuelx.service.ServiceBookingService;import com.example.autofuelx.util.AuthUtil;import jakarta.servlet.*;import jakarta.servlet.http.*;import jakarta.servlet.annotation.*;import java.io.*;import java.util.List;@WebServlet("/service-center/service-booking/assigned")public class AssignJobListServlet extends HttpServlet {  ServiceBookingService serviceBookingService;  @Override  public void init() throws ServletException {    serviceBookingService = new ServiceBookingService();  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {    Employee employee = AuthUtil.checkEmployeeLogin(request, response, "Service Center Staff");    if (employee == null) return;    List<ServiceBookingDTO> assignedServiceBookingDTOS = serviceBookingService.getActiveBookingByEmployee(employee.getEmployeeID());    request.setAttribute("assignedServiceBookingDTOS", assignedServiceBookingDTOS);    request.getRequestDispatcher("/views/service-center/service-booking/list.jsp").forward(request, response);  }}

File Path: src\main\java\com\example\autofuelx\dao\ComplaintDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Complaint;import com.example.autofuelx.model.ReplyComplaint;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class ComplaintDAO {  // Add a new complaint  public void addComplaint(Complaint complaint) {    String sql = "INSERT INTO Complaint (customerID, title, description, status, createdDate, createdTime) VALUES (?, ?, ?, ?, ?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, complaint.getCustomerID());      stmt.setString(2, complaint.getTitle());      stmt.setString(3, complaint.getDescription());      stmt.setString(4, complaint.getStatus());      // Set current date and time      java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());      java.sql.Time currentTime = new java.sql.Time(System.currentTimeMillis());      stmt.setDate(5, currentDate);      stmt.setTime(6, currentTime);      stmt.executeUpdate();    }catch (Exception e){      e.printStackTrace();    }  }  public boolean updateComplaintStatus(int ComplaintID, String status) {    String sql = "UPDATE Complaint SET Status = ? WHERE ComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, status);      stmt.setInt(2, ComplaintID);      return stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return false;  }  // Get complaint by ID  public Complaint getComplaintById(int complaintID) {    String sql = "SELECT * FROM Complaint WHERE complaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, complaintID);      ResultSet rs = stmt.executeQuery();      if (rs.next())        return extractComplaintFromResultSet(rs);    } catch (Exception e){      e.printStackTrace();    }    return null;  }  // Get all Complaint  public List<Complaint> getAllComplaints() {    List<Complaint> Complaint = new ArrayList<>();    String sql = "SELECT * FROM Complaint";    try (Connection conn = DatabaseConnection.getConnection();       Statement stmt = conn.createStatement();       ResultSet rs = stmt.executeQuery(sql)) {      while (rs.next()) {        Complaint.add(extractComplaintFromResultSet(rs));      }      return Complaint;    }catch (Exception e){      e.printStackTrace();    }    return null;  }  public List<ComplaintReplyDTO> getComplaintReplyDTOsByStatus(String Status) {    String sql = "SELECT c.title AS complaintTitle, c.description AS complaintDescription, c.status, " +        "c.createdDate, c.createdTime, c.updatedDate, c.updateTime, c.ComplaintID, " +        "e.FirstName + ' ' + e.LastName AS repliedEmployeeName, e.Type AS repliedEmployeeType, " +        "rc.ReplyComplaintID , rc.Status AS replyStatus ,rc.title AS replyTitle, rc.description AS replyDescription, " +        "rc.createdDate AS replyCreatedDate, rc.createdTime AS replyCreatedTime, " +        "rc.updatedDate AS replyUpdatedDate, rc.updateTime AS replyUpdateTime " +        "FROM Complaint c " +        "LEFT JOIN ReplyComplaint rc ON c.complaintID = rc.complaintID " +        "LEFT JOIN Employee e ON rc.staffID = e.EmployeeID " +        "WHERE c.Status = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement ps = conn.prepareStatement(sql)) {      ps.setString(1, Status);      List<ComplaintReplyDTO> complaintReplyDTOs = new ArrayList<>();      try (ResultSet rs = ps.executeQuery()) {        while (rs.next()) {          ComplaintReplyDTO complaintReplyDTO = new ComplaintReplyDTO();          complaintReplyDTO = extractComplaintDetailsFromResultSet(rs);          complaintReplyDTOs.add(complaintReplyDTO);        }        return complaintReplyDTOs;      }    } catch (SQLException e) {      e.printStackTrace();    }    return null; // Return empty list instead of null  }  public List<ComplaintReplyDTO> getComplaintReplyDTOsFiltered(String keyword,                                 String lastUpdateDate,                                 String customerEmail,                                 String status) {    List<ComplaintReplyDTO> complaintReplyDTOs = new ArrayList<>();    List<Object> parameters = new ArrayList<>();    String sql = """      SELECT c.title AS complaintTitle,          c.description AS complaintDescription,          c.status,          c.createdDate,          c.createdTime,          c.updatedDate,          c.updateTime,          c.ComplaintID,          cust.Email AS customerEmail,          e.FirstName + ' ' + e.LastName AS repliedEmployeeName,          e.Type AS repliedEmployeeType,          rc.ReplyComplaintID,          rc.Status AS replyStatus,          rc.title AS replyTitle,           rc.description AS replyDescription,          rc.createdDate AS replyCreatedDate,          rc.createdTime AS replyCreatedTime,          rc.updatedDate AS replyUpdatedDate,          rc.updateTime AS replyUpdateTime       FROM Complaint c      JOIN Customer cust ON c.CustomerID = cust.CustomerID      LEFT JOIN ReplyComplaint rc ON c.complaintID = rc.complaintID       LEFT JOIN Employee e ON rc.staffID = e.EmployeeID       WHERE 1=1      """;    // --- Keyword search in Complaint Title + Description ---    if (keyword != null && !keyword.trim().isEmpty()) {      sql += " AND (c.title LIKE ? OR c.description LIKE ?)";      String likeKeyword = "%" + keyword.trim() + "%";      parameters.add(likeKeyword);      parameters.add(likeKeyword);    }    // --- Last Update Date filter (complaint only) ---    if (lastUpdateDate != null && !lastUpdateDate.isEmpty()) {      sql += " AND c.updatedDate >= ?";      parameters.add(Date.valueOf(lastUpdateDate));    }    // --- Customer Email filter ---    if (customerEmail != null && !customerEmail.trim().isEmpty()) {      sql += " AND cust.Email = ?";      parameters.add(customerEmail.trim());    }    // --- Complaint Status filter ---    if (status != null && !status.trim().isEmpty() && !"all".equalsIgnoreCase(status)) {      sql += " AND c.Status = ?";      parameters.add(status.trim());    }    sql += " ORDER BY c.updatedDate DESC, c.updateTime DESC";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      // Set all dynamic parameters      for (int i = 0; i < parameters.size(); i++) {        Object param = parameters.get(i);        if (param instanceof String) {          stmt.setString(i + 1, (String) param);        } else if (param instanceof Integer) {          stmt.setInt(i + 1, (Integer) param);        } else if (param instanceof Date) {          stmt.setDate(i + 1, (Date) param);        }      }      try (ResultSet rs = stmt.executeQuery()) {        while (rs.next()) {          ComplaintReplyDTO complaintReplyDTO = new ComplaintReplyDTO();          // Complaint details          complaintReplyDTO = extractComplaintDetailsFromResultSet(rs);          complaintReplyDTOs.add(complaintReplyDTO);        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return complaintReplyDTOs;  }  public ComplaintReplyDTO getComplaintReplyDTOByComplaintID(int ComplaintID) {    String sql = "SELECT c.title AS complaintTitle, c.description AS complaintDescription, c.status, " +        "c.createdDate, c.createdTime, c.updatedDate, c.updateTime, c.ComplaintID, " +        "e.FirstName + ' ' + e.LastName AS repliedEmployeeName, e.Type AS repliedEmployeeType, " +        "rc.ReplyComplaintID , rc.Status AS replyStatus ,rc.title AS replyTitle, rc.description AS replyDescription, " +        "rc.createdDate AS replyCreatedDate, rc.createdTime AS replyCreatedTime, " +        "rc.updatedDate AS replyUpdatedDate, rc.updateTime AS replyUpdateTime " +        "FROM Complaint c " +        "LEFT JOIN ReplyComplaint rc ON c.complaintID = rc.complaintID " +        "LEFT JOIN Employee e ON rc.staffID = e.EmployeeID " +        "WHERE c.ComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement ps = conn.prepareStatement(sql)) {      ps.setInt(1, ComplaintID);      ComplaintReplyDTO complaintReplyDTO = new ComplaintReplyDTO();      try (ResultSet rs = ps.executeQuery()) {        if (rs.next()) {          // Complaint details          complaintReplyDTO = extractComplaintDetailsFromResultSet(rs);        }        return complaintReplyDTO;      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public List<ComplaintReplyDTO> getComplaintReplyDTOsByCustomerID(int customerId) {    String sql = "SELECT c.title AS complaintTitle, c.description AS complaintDescription, c.status, " +        "c.createdDate, c.createdTime, c.updatedDate, c.updateTime, c.ComplaintID, " +        "e.FirstName + ' ' + e.LastName AS repliedEmployeeName, e.Type AS repliedEmployeeType, " +        "rc.ReplyComplaintID , rc.Status AS replyStatus ,rc.title AS replyTitle, rc.description AS replyDescription, " +        "rc.createdDate AS replyCreatedDate, rc.createdTime AS replyCreatedTime, " +        "rc.updatedDate AS replyUpdatedDate, rc.updateTime AS replyUpdateTime " +        "FROM Complaint c " +        "LEFT JOIN ReplyComplaint rc ON c.complaintID = rc.complaintID " +        "LEFT JOIN Employee e ON rc.staffID = e.EmployeeID " +        "WHERE c.customerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement ps = conn.prepareStatement(sql)) {      ps.setInt(1, customerId);      List<ComplaintReplyDTO> complaintReplyDTOs = new ArrayList<>();      try (ResultSet rs = ps.executeQuery()) {        while (rs.next()) {          ComplaintReplyDTO complaintReplyDTO = new ComplaintReplyDTO();          complaintReplyDTO = extractComplaintDetailsFromResultSet(rs);          complaintReplyDTOs.add(complaintReplyDTO);        }        return complaintReplyDTOs;      }    } catch (SQLException e) {      e.printStackTrace();    }    return null; // Return empty list instead of null  }  // Update complaint  public boolean updateComplaint(Complaint complaint) {    String sql = "UPDATE Complaint SET customerID = ?, title = ?, description = ?, status = ?, " +        "updatedDate = ?, updateTime = ? WHERE complaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, complaint.getCustomerID());      stmt.setString(2, complaint.getTitle());      stmt.setString(3, complaint.getDescription());      stmt.setString(4, complaint.getStatus());      java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());      java.sql.Time currentTime = new java.sql.Time(System.currentTimeMillis());      stmt.setDate(5, currentDate);      stmt.setTime(6, currentTime);            stmt.setInt(7, complaint.getComplaintID());      return stmt.executeUpdate() > 0;    } catch (Exception e){      e.printStackTrace();    }    return false;  }  // Delete complaint  public boolean deleteComplaint(int complaintID) {    String sql = "DELETE FROM Complaint WHERE complaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, complaintID);      return stmt.executeUpdate() > 0;    } catch (Exception e){      e.printStackTrace();    }    return false;  }  // Get Complaint by customer ID  public List<Complaint> getComplaintsByCustomerId(int customerID) {    List<Complaint> Complaint = new ArrayList<>();    String sql = "SELECT * FROM Complaint WHERE customerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        Complaint.add(extractComplaintFromResultSet(rs));      }      return Complaint;    }catch (Exception e){      e.printStackTrace();    }    return null;  }  private ComplaintReplyDTO extractComplaintDetailsFromResultSet(ResultSet rs){    ComplaintReplyDTO complaintReplyDTO;    try{      complaintReplyDTO = new ComplaintReplyDTO();      // Complaint details      complaintReplyDTO.setComplaintID(rs.getInt("ComplaintID"));      complaintReplyDTO.setTitle(rs.getString("complaintTitle"));      complaintReplyDTO.setDescription(rs.getString("complaintDescription"));      complaintReplyDTO.setStatus(rs.getString("status"));      complaintReplyDTO.setCreatedDate(rs.getDate("createdDate"));      complaintReplyDTO.setCreatedTime(rs.getTime("createdTime"));      complaintReplyDTO.setUpdatedDate(rs.getDate("updatedDate"));      complaintReplyDTO.setUpdateTime(rs.getTime("updateTime"));      // Reply details      complaintReplyDTO.setReplyComplaintID((Integer) rs.getObject("ReplyComplaintID"));      complaintReplyDTO.setRepliedEmployeeName(rs.getString("repliedEmployeeName"));      complaintReplyDTO.setRepliedEmployeeType(rs.getString("repliedEmployeeType"));      complaintReplyDTO.setReplyTitle(rs.getString("replyTitle"));      complaintReplyDTO.setReplyDescription(rs.getString("replyDescription"));      complaintReplyDTO.setReplyStatus(rs.getString("replyStatus"));      complaintReplyDTO.setReplyCreatedDate(rs.getDate("replyCreatedDate"));      complaintReplyDTO.setReplyCreatedTime(rs.getTime("replyCreatedTime"));      complaintReplyDTO.setReplyUpdatedDate(rs.getDate("replyUpdatedDate"));      complaintReplyDTO.setReplyUpdateTime(rs.getTime("replyUpdateTime"));      return complaintReplyDTO;    }catch (Exception e){      e.printStackTrace();      return null;    }  }  // Helper method to extract complaint from ResultSet  private Complaint extractComplaintFromResultSet(ResultSet rs) {    try{      Complaint complaint = new Complaint();      complaint.setComplaintID(rs.getInt("complaintID"));      complaint.setCustomerID(rs.getInt("customerID"));      complaint.setTitle(rs.getString("title"));      complaint.setDescription(rs.getString("description"));      complaint.setStatus(rs.getString("status"));      complaint.setCreatedDate(rs.getDate("createdDate"));      complaint.setCreatedTime(rs.getTime("createdTime"));      complaint.setUpdatedDate(rs.getDate("updatedDate"));      complaint.setUpdateTime(rs.getTime("updateTime"));      return complaint;    }    catch (Exception e){      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\CustomerDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Employee;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class CustomerDAO {  public boolean registerCustomer(Customer customer) {    boolean success = false;    String sql = "INSERT INTO Customer (FirstName, LastName, Email, Password, AddressNo, AddressLane, AddressArea) " +        "VALUES (?, ?, ?, ?, ?, ?, ?)";    try {      Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql);      stmt.setString(1, customer.getFirstName());      stmt.setString(2, customer.getLastName());      stmt.setString(3, customer.getEmail());   // EMAIL      stmt.setString(4, customer.getPassword());      stmt.setString(5, customer.getAddressNo());      stmt.setString(6, customer.getAddressLane());      stmt.setString(7, customer.getAddressArea());      int rows = stmt.executeUpdate();      success = rows > 0;      System.out.println("Customer Registration : " + success);    } catch (Exception e) {      e.printStackTrace();    }    return success;  }  // Check login by email + password  public Customer loginCustomer(String email, String password) {    Customer customer = null;    String sql = "SELECT * FROM Customer WHERE Email = ? AND Password = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, email);      stmt.setString(2, password);      var rs = stmt.executeQuery();      if (rs.next()) {        customer = new Customer();        customer.setCustomerID(rs.getInt("CustomerID"));        customer.setFirstName(rs.getString("FirstName"));        customer.setLastName(rs.getString("LastName"));        customer.setEmail(rs.getString("Email"));        customer.setPassword(rs.getString("Password"));        customer.setAddressNo(rs.getString("AddressNo"));        customer.setAddressLane(rs.getString("AddressLane"));        customer.setAddressArea(rs.getString("AddressArea"));      }    } catch (Exception e) {      e.printStackTrace();    }    return customer;  }  public List<Customer> getCustomers() {    List<Customer> customers = new ArrayList<>();    String query = "SELECT * FROM Customer";    try (Connection conn = DatabaseConnection.getConnection();       Statement stmt = conn.createStatement();       ResultSet rs = stmt.executeQuery(query)) {      while (rs.next()) {        Customer customer = extractCustomerFromResultSet(rs);        customers.add(customer);      }    } catch (SQLException e) {      e.printStackTrace();    }    return customers;  }  public Customer getCustomerById(int id) {    String query = "SELECT * FROM Customer WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setInt(1, id);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        return extractCustomerFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public Customer getCustomerByEmail(String email) {    String query = "SELECT * FROM Customer WHERE Email = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, email);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        return extractCustomerFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public boolean deleteCustomer(int id) {    String query = "DELETE FROM Customer WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement pstmt = conn.prepareStatement(query)) {      pstmt.setInt(1, id);      int rowsAffected = pstmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      System.out.println(e.getMessage());      return false;    }  }  public boolean updateCustomer(Customer customer) {    String query = "UPDATE Customer SET FirstName = ?, LastName = ?, Email = ?, Password = ?, " +        "AddressNo = ?, AddressLane = ?, AddressArea = ? " +        "WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement pstmt = conn.prepareStatement(query)) {      pstmt.setString(1, customer.getFirstName());      pstmt.setString(2, customer.getLastName());      pstmt.setString(3, customer.getEmail());      pstmt.setString(4, customer.getPassword());      pstmt.setString(5, customer.getAddressNo());      pstmt.setString(6, customer.getAddressLane());      pstmt.setString(7, customer.getAddressArea());      pstmt.setInt(8, customer.getCustomerID());      int rowsAffected = pstmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  private Customer extractCustomerFromResultSet(ResultSet rs) {    try{      Customer customer = new Customer();      customer.setCustomerID(rs.getInt("CustomerID"));      customer.setFirstName(rs.getString("FirstName"));      customer.setLastName(rs.getString("LastName"));      customer.setEmail(rs.getString("Email"));      customer.setPassword(rs.getString("Password"));      customer.setAddressNo(rs.getString("AddressNo"));      customer.setAddressLane(rs.getString("AddressLane"));      customer.setAddressArea(rs.getString("AddressArea"));      return customer;    }    catch (Exception e) {      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\CustomerPhoneNumberDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.CustomerPhoneNumber;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class CustomerPhoneNumberDAO {  // Add new phone number  public boolean addPhoneNumber(CustomerPhoneNumber phone) {    String sql = "INSERT INTO CustomerPhoneNumber (CustomerID, PhoneNumber) VALUES (?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, phone.getCustomerID());      stmt.setString(2, phone.getPhoneNumber());      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Delete a phone number  public boolean deletePhoneNumber(int customerID, String phoneNumber) {    String sql = "DELETE FROM CustomerPhoneNumber WHERE CustomerID = ? AND PhoneNumber = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      stmt.setString(2, phoneNumber);      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Get all phone numbers for a customer  public List<String> getPhoneNumbersByCustomer(int customerID) {    List<String> numbers = new ArrayList<>();    String sql = "SELECT PhoneNumber FROM CustomerPhoneNumber WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        numbers.add(rs.getString("PhoneNumber"));      }    } catch (SQLException e) {      e.printStackTrace();    }    return numbers;  }}

File Path: src\main\java\com\example\autofuelx\dao\EmployeeDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.Employee;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class EmployeeDAO {  public List<Employee> getAllEmployees() {    List<Employee> employees = new ArrayList<>();    String query = "SELECT * FROM Employee";    try (Connection conn = DatabaseConnection.getConnection();       Statement stmt = conn.createStatement();       ResultSet rs = stmt.executeQuery(query)) {      while (rs.next()) {        Employee employee = extractEmployeeFromResultSet(rs);        employees.add(employee);      }    } catch (SQLException e) {      e.printStackTrace();    }    return employees;  }  public Employee getEmployeeById(int id) {    String query = "SELECT * FROM Employee WHERE EmployeeID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setInt(1, id);      try (ResultSet rs = stmt.executeQuery()) {        if (rs.next()) {          return extractEmployeeFromResultSet(rs);        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public boolean updateEmployeeStatus(int employeeID, String status) {    String query = "UPDATE Employee SET Status = ? WHERE EmployeeID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, status);      stmt.setInt(2, employeeID);      int rowsAffected = stmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  public boolean addEmployee(Employee employee) {    String query = "INSERT INTO Employee (FirstName, LastName, DateOfBirth, Salary, Status, " +        "HireDate, AddressNo, AddressLane, AddressArea, Email, SkillSet, " +        "Role, Shift, Type, Password) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, employee.getFirstName());      stmt.setString(2, employee.getLastName());      stmt.setDate(3, employee.getDateOfBirth());      stmt.setDouble(4, employee.getSalary());      stmt.setString(5, employee.getStatus());      stmt.setDate(6, employee.getHireDate());      stmt.setString(7, employee.getAddressNo());      stmt.setString(8, employee.getAddressLane());      stmt.setString(9, employee.getAddressArea());      stmt.setString(10, employee.getEmail());      stmt.setString(11, employee.getSkillSet());      stmt.setString(12, employee.getRole());      stmt.setString(13, employee.getShift());      stmt.setString(14, employee.getType());      stmt.setString(15, employee.getPassword());      int rowsAffected = stmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  public boolean updateEmployee(Employee employee) {    String query = "UPDATE Employee SET FirstName = ?, LastName = ?, DateOfBirth = ?, " +        "Salary = ?, Status = ?, HireDate = ?, AddressNo = ?, AddressLane = ?, " +        "AddressArea = ?, Email = ?, Password = ?, SkillSet = ?, Role = ?, Shift = ?, Type = ? " +        "WHERE EmployeeID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, employee.getFirstName());      stmt.setString(2, employee.getLastName());      stmt.setDate(3, employee.getDateOfBirth());      stmt.setDouble(4, employee.getSalary());      stmt.setString(5, employee.getStatus());      stmt.setDate(6, employee.getHireDate());      stmt.setString(7, employee.getAddressNo());      stmt.setString(8, employee.getAddressLane());      stmt.setString(9, employee.getAddressArea());      stmt.setString(10, employee.getEmail());      stmt.setString(11, employee.getPassword());      stmt.setString(12, employee.getSkillSet());      stmt.setString(13, employee.getRole());      stmt.setString(14, employee.getShift());      stmt.setString(15, employee.getType());      stmt.setInt(16, employee.getEmployeeID());      int rowsAffected = stmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  public boolean deleteEmployee(int id) {    String query = "DELETE FROM Employee WHERE EmployeeID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setInt(1, id);      int rowsAffected = stmt.executeUpdate();      return rowsAffected > 0;    } catch (SQLException e) {      e.printStackTrace();      System.out.println(e.getMessage());      return false;    }  }  public List<Employee> getEmployeesByType(String type) {    List<Employee> employees = new ArrayList<>();    String query = "SELECT * FROM Employee WHERE Type = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, type);      try (ResultSet rs = stmt.executeQuery()) {        while (rs.next()) {          Employee employee = extractEmployeeFromResultSet(rs);          employees.add(employee);        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return employees;  }  public List<Employee> getEmployeesByType(String type, String status) {    List<Employee> employees = new ArrayList<>();    String query = "SELECT * FROM Employee WHERE Type = ? AND Status = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, type);      stmt.setString(2, status);      try (ResultSet rs = stmt.executeQuery()) {        while (rs.next()) {          Employee employee = extractEmployeeFromResultSet(rs);          employees.add(employee);        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return employees;  }  public List<Employee> getEmployeesByTypeStatus(String type, String status) {    List<Employee> employees = new ArrayList<>();    String query = "SELECT * FROM Employee WHERE Type = ? AND Status = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, type);      stmt.setString(2, status);      try (ResultSet rs = stmt.executeQuery()) {        while (rs.next()) {          Employee employee = extractEmployeeFromResultSet(rs);          employees.add(employee);        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return employees;  }  public List<Employee> getFilteredEmployees(String type, String status,                        Date hireDateFrom, Date hireDateTo,                        Double minSalary, Double maxSalary,                        String name, String ageGroup) {    List<Employee> employees = new ArrayList<>();    String sql = "SELECT * FROM Employee WHERE 1=1";    List<Object> params = new ArrayList<>();    // Add type filter    if (type != null && !type.isEmpty()) {      sql += " AND Type = ?";      params.add(type);    }    // Add status filter    if (status != null && !status.isEmpty()) {      sql += " AND Status = ?";      params.add(status);    }    // Add hire date range filter    if (hireDateFrom != null) {      sql += " AND HireDate >= ?";      params.add(hireDateFrom);    }    if (hireDateTo != null) {      sql += " AND HireDate <= ?";      params.add(hireDateTo);    }    // Add salary range filter    if (minSalary != null) {      sql += " AND Salary >= ?";      params.add(minSalary);    }    if (maxSalary != null) {      sql += " AND Salary <= ?";      params.add(maxSalary);    }    // Add name search filter (first or last name)    if (name != null && !name.isEmpty()) {      sql += " AND (FirstName LIKE ? OR LastName LIKE ?)";      String namePattern = "%" + name + "%";      params.add(namePattern);      params.add(namePattern);    }    // Add age group filter    if (ageGroup != null && !ageGroup.isEmpty()) {      switch (ageGroup) {        case "<30":          sql += " AND DATEDIFF(YEAR, DateOfBirth, GETDATE()) < 30";          break;        case "30-50":          sql += " AND DATEDIFF(YEAR, DateOfBirth, GETDATE()) BETWEEN 30 AND 50";          break;        case ">50":          sql += " AND DATEDIFF(YEAR, DateOfBirth, GETDATE()) > 50";          break;      }    }    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      // Set parameters      int i = 1;      for (Object param : params) {        if (param instanceof String) {          stmt.setString(i++, (String) param);        } else if (param instanceof Date) {          stmt.setDate(i++, (Date) param);        } else if (param instanceof Double) {          stmt.setDouble(i++, (Double) param);        }      }      // Execute query      try (ResultSet rs = stmt.executeQuery()) {        while (rs.next()) {          employees.add(extractEmployeeFromResultSet(rs));        }      }    } catch (SQLException e) {      e.printStackTrace();    }    return employees;  }  // ... existing methods ...  public Employee validateEmployee(String email, String password, String role) {    Employee admin = null;    String query = "SELECT * FROM Employee WHERE Email = ? AND Password = ? AND Type = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(query)) {      stmt.setString(1, email);      stmt.setString(2, password);      stmt.setString(3, role);      ResultSet rs = stmt.executeQuery();      if (rs.next()){        admin = extractEmployeeFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return admin;  }  private Employee extractEmployeeFromResultSet(ResultSet rs) throws SQLException {    Employee employee = new Employee();    employee.setEmployeeID(rs.getInt("EmployeeID"));    employee.setFirstName(rs.getString("FirstName"));    employee.setLastName(rs.getString("LastName"));    employee.setDateOfBirth(rs.getDate("DateOfBirth"));    employee.setSalary(rs.getDouble("Salary"));    employee.setStatus(rs.getString("Status"));    employee.setHireDate(rs.getDate("HireDate"));    employee.setAddressNo(rs.getString("AddressNo"));    employee.setAddressLane(rs.getString("AddressLane"));    employee.setAddressArea(rs.getString("AddressArea"));    employee.setPassword(rs.getString("Password"));    employee.setEmail(rs.getString("Email"));    employee.setSkillSet(rs.getString("SkillSet"));    employee.setRole(rs.getString("Role"));    employee.setShift(rs.getString("Shift"));    employee.setType(rs.getString("Type"));    return employee;  }}

File Path: src\main\java\com\example\autofuelx\dao\EmployeePhoneNumberDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.EmployeePhoneNumber;import com.example.autofuelx.util.DatabaseConnection;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class EmployeePhoneNumberDAO {  // Add new phone number  public boolean addPhoneNumber(EmployeePhoneNumber phone) {    String sql = "INSERT INTO EmployeePhoneNumber (EmployeeID, PhoneNumber) VALUES (?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, phone.getEmployeeID());      stmt.setString(2, phone.getPhoneNumber());      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Delete a phone number  public boolean deletePhoneNumber(int employeeID, String phoneNumber) {    String sql = "DELETE FROM EmployeePhoneNumber WHERE EmployeeID = ? AND PhoneNumber = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, employeeID);      stmt.setString(2, phoneNumber);      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Get all phone numbers for a employee  public List<String> getPhoneNumbersByEmployee(int employeeID) {    List<String> numbers = new ArrayList<>();    String sql = "SELECT PhoneNumber FROM EmployeePhoneNumber WHERE EmployeeID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, employeeID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        numbers.add(rs.getString("PhoneNumber"));      }    } catch (SQLException e) {      e.printStackTrace();    }    return numbers;  }}

File Path: src\main\java\com\example\autofuelx\dao\FeedbackDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.Feedback;import com.example.autofuelx.util.DatabaseConnection;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.time.LocalDate;import java.time.LocalTime;import java.util.ArrayList;import java.util.List;public class FeedbackDAO {  public void saveFeedback(Feedback feedback) {    String sql = "INSERT INTO Feedback (Rate, Message, CreatedDate, CreatedTime, CustomerID) " +        "VALUES (?, ?, ?, ?, ?)";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, feedback.getRate());      stmt.setString(2, feedback.getMessage());      // Set current date and time      LocalDate currentDate = LocalDate.now();      LocalTime currentTime = LocalTime.now();      stmt.setDate(3, java.sql.Date.valueOf(currentDate));      stmt.setTime(4, java.sql.Time.valueOf(currentTime));      stmt.setInt(5, feedback.getCustomerID());      stmt.executeUpdate();    }    catch (Exception e){      e.printStackTrace();    }  }  public void deleteFeedback(int feedbackID) {    String sql = "DELETE FROM Feedback WHERE FeedbackID = ?";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, feedbackID);      stmt.executeUpdate(); // Fixed: executeUpdate() instead of executeQuery()    }    catch (Exception e){      e.printStackTrace();    }  }  public List<Feedback> getAllFeedbacks(){    String sql = "SELECT * FROM Feedback";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      ResultSet rs = stmt.executeQuery();      List<Feedback> feedbacks = new ArrayList<Feedback>();      while(rs.next()){        Feedback feedback = extractFeedbackFromResultSet(rs);        feedbacks.add(feedback);      }      return feedbacks;    }    catch (Exception e){      e.printStackTrace();      return null;    }  }  public List<Feedback> getFeedbacksByCustomerID(int customerID) {    String sql = "SELECT * FROM Feedback WHERE CustomerID = ?";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql);){      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      List<Feedback> feedbacks = new ArrayList<>();      while(rs.next()){        Feedback feedback = extractFeedbackFromResultSet(rs);        feedbacks.add(feedback);      }      return feedbacks;    }    catch (Exception e){      e.printStackTrace();      return null;    }  }  private Feedback getFeedback(int feedbackID) {    String sql = "SELECT * FROM Feedback WHERE FeedbackID = ?";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, feedbackID);      ResultSet rs = stmt.executeQuery();      if (rs.next()){        return extractFeedbackFromResultSet(rs);      }    }    catch(Exception e){      e.printStackTrace();    }    return null;  }  private Feedback extractFeedbackFromResultSet(ResultSet rs) {    try{      Feedback feedback = new Feedback();      feedback.setFeedbackID(rs.getInt("FeedbackID"));      feedback.setMessage(rs.getString("Message")); // Fixed: "Message" instead of "Description"      feedback.setCustomerID(rs.getInt("CustomerID"));      feedback.setRate(rs.getInt("Rate"));      // Handle separate date and time columns      java.sql.Date createdDate = rs.getDate("CreatedDate");      java.sql.Time createdTime = rs.getTime("CreatedTime");      if (createdDate != null) {        feedback.setCreatedDate(createdDate.toLocalDate());      }      if (createdTime != null) {        feedback.setCreatedTime(createdTime.toLocalTime());      }      return feedback;    } catch (Exception e){      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\FuelDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class FuelDAO {  // Create (Insert new fuel record)  public boolean addFuel(Fuel fuel) {    String sql = "INSERT INTO Fuel (Type, Quantity, CostPerLiter) VALUES (?, ?, ?)";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setString(1, fuel.getType());      ps.setDouble(2, fuel.getQuantity());      ps.setDouble(3, fuel.getCostPerLiter());      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Read (Fetch fuel by ID)  public Fuel getFuelById(int id) {    String sql = "SELECT * FROM Fuel WHERE FuelID = ?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setInt(1, id);      ResultSet rs = ps.executeQuery();      if (rs.next()) {        return new Fuel(            rs.getInt("FuelID"),            rs.getString("Type"),            rs.getDouble("Quantity"),            rs.getDouble("CostPerLiter")        );      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public Fuel getFuelByType(String fuelType) {    Fuel fuel = null;    String sql = "SELECT * FROM Fuel WHERE Type = ?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setString(1, fuelType);      ResultSet rs = ps.executeQuery();      if (rs.next()) {        fuel = extractFuelFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return fuel;  }  // Read (Fetch all fuels)  public List<Fuel> getAllFuels() {    List<Fuel> fuels = new ArrayList<>();    String sql = "SELECT * FROM Fuel";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ResultSet rs = ps.executeQuery();      while (rs.next()) {        Fuel fuel = extractFuelFromResultSet(rs);        fuels.add(fuel);      }    } catch (SQLException e) {      e.printStackTrace();    }    return fuels;  }  // Update (Modify fuel details)  public boolean updateFuel(Fuel fuel) {    String sql = "UPDATE Fuel SET Type=?, Quantity=?, CostPerLiter=? WHERE FuelID=?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setString(1, fuel.getType());      ps.setDouble(2, fuel.getQuantity());      ps.setDouble(3, fuel.getCostPerLiter());      ps.setInt(4, fuel.getFuelID());      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  // Delete (Remove fuel record)  public boolean deleteFuel(int id) {    String sql = "DELETE FROM Fuel WHERE FuelID=?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setInt(1, id);      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();    }    return false;  }  public List<String> getFuelTypes() {    List<String> fuelTypes = new ArrayList<>();    String sql = "SELECT Type FROM Fuel";    try(Connection con = DatabaseConnection.getConnection();      PreparedStatement ps = con.prepareStatement(sql)) {      ResultSet rs = ps.executeQuery();      while (rs.next()) {        fuelTypes.add(rs.getString("Type"));      }      return fuelTypes;    }    catch (Exception e){      e.printStackTrace();      return null;    }  }  private Fuel extractFuelFromResultSet(ResultSet rs){    try{      Fuel fuel = new Fuel();      fuel.setFuelID(rs.getInt("FuelID"));      fuel.setType(rs.getString("Type"));      fuel.setQuantity(rs.getDouble("Quantity"));      fuel.setCostPerLiter(rs.getDouble("CostPerLiter"));      return fuel;    }    catch (Exception e){      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\FuelPurchaseDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.dto.FuelPurchaseDetailDTO;import com.example.autofuelx.model.FuelPurchase;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.time.LocalDate;import java.time.LocalTime;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;public class FuelPurchaseDAO {  public boolean insertFuelPurchase(FuelPurchase purchase) {    // Insert purchase record    String sql = "INSERT INTO FuelPurchase (CustomerID, FuelID, VehicleID, Quantity, TotalCost, PurchaseDate, PurchaseTime) VALUES (?, ?, ?, ?, ?, ?, ?)";    try(Connection con = DatabaseConnection.getConnection();      PreparedStatement ps = con.prepareStatement(sql)){      ps.setInt(1, purchase.getCustomerID());      ps.setInt(2, purchase.getFuelID());      ps.setInt(3, purchase.getVehicleID());      ps.setDouble(4, purchase.getQuantity());      ps.setDouble(5, purchase.getTotalCost());      // Set current date and time      LocalDate currentDate = LocalDate.now();      LocalTime currentTime = LocalTime.now();      ps.setDate(6, Date.valueOf(currentDate));      ps.setTime(7, Time.valueOf(currentTime));      return ps.executeUpdate() > 0;    }    catch (Exception e){      e.printStackTrace();      return false;    }  }  public List<FuelPurchaseDetailDTO> getFuelPurchaseDetailByCustomer(int customerID) {    List<FuelPurchaseDetailDTO> purchases = new ArrayList<>();    String sql = """      SELECT fp.FuelPurchaseID,          c.FirstName + ' ' + c.LastName AS CustomerName,          c.Email,          v.PlateNumber,          v.Model,          f.Type AS FuelType,          fp.Quantity,          fp.TotalCost,          fp.PurchaseDate,          fp.PurchaseTime      FROM FuelPurchase fp      JOIN Customer c ON fp.CustomerID = c.CustomerID      JOIN Vehicle v ON fp.VehicleID = v.VehicleID      JOIN Fuel f ON fp.FuelID = f.FuelID      WHERE fp.CustomerID = ?      ORDER BY fp.PurchaseDate DESC, fp.PurchaseTime DESC    """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        purchases.add(extractFuelPurchaseDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return purchases;  }  public List<FuelPurchaseDetailDTO> getFuelPurchaseDetailByCustomer(int customerID,                                    String durationFilterDateStart,                                    String durationFilterDateEnd,                                    String vehicleTypeFilter,                                    String vehicleFilter,                                    String fuelTypeFilter) {    List<FuelPurchaseDetailDTO> purchases = new ArrayList<>();    List<Object> parameters = new ArrayList<>();    String sql = """        SELECT fp.FuelPurchaseID,            c.FirstName + ' ' + c.LastName AS CustomerName,            c.Email,            v.PlateNumber,            v.Model,            f.Type AS FuelType,            fp.Quantity,            fp.TotalCost,            fp.PurchaseDate,            fp.PurchaseTime        FROM FuelPurchase fp        JOIN Customer c ON fp.CustomerID = c.CustomerID        JOIN Vehicle v ON fp.VehicleID = v.VehicleID        JOIN Fuel f ON fp.FuelID = f.FuelID        WHERE fp.CustomerID = ?        """;    parameters.add(customerID);    // Add date range filter - simplified for date only    if (durationFilterDateStart != null && !durationFilterDateStart.isEmpty()) {      sql += " AND fp.PurchaseDate >= ?";      LocalDate startDate = LocalDate.parse(durationFilterDateStart);      parameters.add(startDate);    }    if (durationFilterDateEnd != null && !durationFilterDateEnd.isEmpty()) {      sql += " AND fp.PurchaseDate <= ?";      LocalDate endDate = LocalDate.parse(durationFilterDateEnd);      parameters.add(endDate);    }    // Add vehicle type filter    if (vehicleTypeFilter != null && !vehicleTypeFilter.isEmpty() && !vehicleTypeFilter.equals("all")) {      sql += " AND v.Type = ?";      parameters.add(vehicleTypeFilter);    }    System.out.println("vehicleTypeFilter :"+ vehicleTypeFilter);    // Add vehicle filter    if (vehicleFilter != null && !vehicleFilter.isEmpty() && !vehicleFilter.equals("all")) {      sql += " AND v.VehicleID = ?";      parameters.add(Integer.parseInt(vehicleFilter));    }    // Add fuel type filter    if (fuelTypeFilter != null && !fuelTypeFilter.isEmpty() && !fuelTypeFilter.equals("all")) {      sql += " AND f.FuelID = ?";      parameters.add(Integer.parseInt(fuelTypeFilter));    }    sql += " ORDER BY fp.PurchaseDate DESC, fp.PurchaseTime DESC";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      // Set all parameters dynamically      for (int i = 0; i < parameters.size(); i++) {        Object param = parameters.get(i);        if (param instanceof String) {          stmt.setString(i+1 , (String) param);        } else if (param instanceof Integer) {          stmt.setInt(i+1, (Integer) param);        } else if (param instanceof LocalDate) {          stmt.setDate(i+1, Date.valueOf((LocalDate) param));        }      }      System.out.println(stmt.getMetaData());      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        purchases.add(extractFuelPurchaseDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return purchases;  }  public FuelPurchaseDetailDTO extractFuelPurchaseDetailFromResultSet(ResultSet rs) {    FuelPurchaseDetailDTO fuelPurchaseDetailDTO;    try {      fuelPurchaseDetailDTO = new FuelPurchaseDetailDTO();      // Set basic properties      fuelPurchaseDetailDTO.setFuelPurchaseID(rs.getInt("FuelPurchaseID"));      fuelPurchaseDetailDTO.setFuelType(rs.getString("FuelType"));      fuelPurchaseDetailDTO.setQuantity(rs.getDouble("Quantity"));      fuelPurchaseDetailDTO.setTotalCost(rs.getDouble("TotalCost"));      // Set customer information      fuelPurchaseDetailDTO.setCustomerName(rs.getString("CustomerName"));      fuelPurchaseDetailDTO.setCustomerEmail(rs.getString("Email"));      // Set vehicle information      fuelPurchaseDetailDTO.setVehiclePlate(rs.getString("PlateNumber"));      fuelPurchaseDetailDTO.setVehicleModel(rs.getString("Model"));      // Set purchase date and time      java.sql.Date purchaseDate = rs.getDate("PurchaseDate");      java.sql.Time purchaseTime = rs.getTime("PurchaseTime");      if (purchaseDate != null) {        fuelPurchaseDetailDTO.setPurchaseDate(purchaseDate.toLocalDate());      }      if (purchaseTime != null) {        fuelPurchaseDetailDTO.setPurchaseTime(purchaseTime.toLocalTime());      }      return fuelPurchaseDetailDTO;    } catch (SQLException e) {      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\ReplyComplaintDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.ReplyComplaint;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.sql.Date;import java.sql.Time;import java.util.List;public class ReplyComplaintDAO {  // Add a new reply complaint  public boolean addReplyComplaint(ReplyComplaint replyComplaint) {    String sql = "INSERT INTO ReplyComplaint (staffID, complaintID, title, description, createdDate, createdTime, UpdatedDate, UpdateTime, Status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      // Get current date and time      // Get current date and time      long now = System.currentTimeMillis();      Date currentDate = new Date(now); // java.sql.Date for date column      Time currentTime = new Time(now); // java.sql.Time for time column      stmt.setInt(1, replyComplaint.getStaffID());      stmt.setInt(2, replyComplaint.getComplaintID());      stmt.setString(3, replyComplaint.getTitle());      stmt.setString(4, replyComplaint.getDescription());      stmt.setDate(5, currentDate);      stmt.setTime(6, currentTime);      stmt.setDate(7, currentDate);      stmt.setTime(8, currentTime);      stmt.setString(9, replyComplaint.getStatus());      stmt.executeUpdate();      return true;    } catch (Exception e) {      e.printStackTrace();      return false;    }  }  // Get reply complaint by ID  public ReplyComplaint getReplyComplaintByComplaintID(int ComplaintID) {    String sql = "SELECT * FROM ReplyComplaint WHERE ComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, ComplaintID);      ResultSet rs = stmt.executeQuery();      if (rs.next())        return extractReplyComplaintFromResultSet(rs);    } catch (Exception e) {      e.printStackTrace();    }    return null;  }  // Get all reply complaints  public List<ReplyComplaint> getAllReplyComplaints() {    List<ReplyComplaint> replyComplaints = new ArrayList<>();    String sql = "SELECT * FROM ReplyComplaint";    try (Connection conn = DatabaseConnection.getConnection();       Statement stmt = conn.createStatement();       ResultSet rs = stmt.executeQuery(sql)) {      while (rs.next()) {        replyComplaints.add(extractReplyComplaintFromResultSet(rs));      }      return replyComplaints;    } catch (Exception e) {      e.printStackTrace();    }    return null;  }  // Update reply complaint  public boolean updateReplyComplaint(ReplyComplaint replyComplaint) {    String sql = "UPDATE ReplyComplaint SET staffID = ?, complaintID = ?, title = ?, description = ?, " +        "updatedDate = ?, updateTime = ? WHERE replyComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, replyComplaint.getStaffID());      stmt.setInt(2, replyComplaint.getComplaintID());      stmt.setString(3, replyComplaint.getTitle());      stmt.setString(4, replyComplaint.getDescription());      Date currentDate = new Date(System.currentTimeMillis());      Time currentTime = new Time(System.currentTimeMillis());      stmt.setDate(5, currentDate);      stmt.setTime(6, currentTime);      stmt.setInt(7, replyComplaint.getReplyComplaintID());      return stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return false;  }  public boolean updateReplyComplaintStatus(int replyComplaintID, String status) {    String sql = "UPDATE ReplyComplaint SET Status = ? WHERE replyComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, status);      stmt.setInt(2, replyComplaintID);      return stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return false;  }  // Delete reply complaint  public boolean deleteReplyComplaint(int replyComplaintID) {    String sql = "DELETE FROM ReplyComplaint WHERE replyComplaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, replyComplaintID);      return stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return false;  }  // Get reply complaints by complaint ID  public List<ReplyComplaint> getReplyComplaintsByComplaintId(int complaintID) {    List<ReplyComplaint> replyComplaints = new ArrayList<>();    String sql = "SELECT * FROM ReplyComplaint WHERE complaintID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, complaintID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        replyComplaints.add(extractReplyComplaintFromResultSet(rs));      }      return replyComplaints;    } catch (Exception e) {      e.printStackTrace();    }    return null;  }  // Get reply complaints by staff ID  public List<ReplyComplaint> getReplyComplaintsByStaffId(int staffID) {    List<ReplyComplaint> replyComplaints = new ArrayList<>();    String sql = "SELECT * FROM ReplyComplaint WHERE staffID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, staffID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        replyComplaints.add(extractReplyComplaintFromResultSet(rs));      }      return replyComplaints;    } catch (Exception e) {      e.printStackTrace();    }    return null;  }  // Helper method to extract reply complaint from ResultSet  private ReplyComplaint extractReplyComplaintFromResultSet(ResultSet rs) {    try {      ReplyComplaint replyComplaint = new ReplyComplaint();      replyComplaint.setReplyComplaintID(rs.getInt("replyComplaintID"));      replyComplaint.setStaffID(rs.getInt("staffID"));      replyComplaint.setComplaintID(rs.getInt("complaintID"));      replyComplaint.setTitle(rs.getString("title"));      replyComplaint.setDescription(rs.getString("description"));      replyComplaint.setCreatedDate(rs.getDate("createdDate"));      replyComplaint.setCreatedTime(rs.getTime("createdTime"));      replyComplaint.setUpdatedDate(rs.getDate("updatedDate"));      replyComplaint.setUpdateTime(rs.getTime("updateTime"));      return replyComplaint;    } catch (Exception e) {      e.printStackTrace();      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dao\ServiceBookingDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.ServiceBooking;import com.example.autofuelx.util.DatabaseConnection;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;import java.sql.*;import java.time.LocalDate;public class ServiceBookingDAO {  public ServiceBooking getBookingByID(int bookingID) {    String sql = "SELECT * FROM ServiceBooking WHERE BookingID = ?";    ServiceBooking booking = null;    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, bookingID);      ResultSet rs = stmt.executeQuery();      if(rs.next()){        booking = extractBookingFromResultSet(rs);      }      return booking;    }    catch (Exception e) {      e.printStackTrace();      return null;    }  }  // Insert new booking  public boolean insertBooking(ServiceBooking booking) {    String sql = "INSERT INTO ServiceBooking (CustomerID, VehicleID, ServiceID, BookingDate, BookingTime, Status) VALUES (?, ?, ?, ?, ?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, booking.getCustomerID());      stmt.setInt(2, booking.getVehicleID());      stmt.setInt(3, booking.getServiceID());      stmt.setDate(4, Date.valueOf(booking.getBookingDate()));      stmt.setTime(5, Time.valueOf(booking.getBookingTime()));      stmt.setString(6, booking.getStatus());      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  public List<ServiceBookingDTO> getActiveBookingsByCustomerID(int customerID) {    List<ServiceBookingDTO> bookingDTOList = new ArrayList<>();    String sql = """    SELECT sb.BookingID,        sb.BookingDate,        sb.BookingTime,        sb.Status,        sb.TotalCost,        c.FirstName AS CustomerFirstName,        c.LastName AS CustomerLastName,        c.Email AS CustomerEmail,        v.VehicleID,        v.PlateNumber,        v.Model AS VehicleModel,        v.Type AS VehicleType,        s.ServiceID,        s.Type AS ServiceType,        s.Description AS ServiceDescription,        s.Cost AS ServiceCost,        e.EmployeeID AS StaffID,        e.FirstName AS StaffFirstName,        e.LastName AS StaffLastName,        e.Role AS StaffRole    FROM ServiceBooking sb    JOIN Customer c ON sb.CustomerID = c.CustomerID    JOIN Vehicle v ON sb.VehicleID = v.VehicleID    JOIN Service s ON sb.ServiceID = s.ServiceID    LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID    WHERE (sb.Status = ? OR sb.Status = ? OR sb.Status = ? OR sb.Status = ? OR sb.Status = ? ) AND c.CustomerID = ?    ORDER BY sb.BookingDate DESC, sb.BookingTime DESC    """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, "Awaiting Confirmation");      stmt.setString(2, "Confirmed");      stmt.setString(3, "In Progress");      stmt.setString(4, "Reschedule Required");      stmt.setString(5, "Awaiting Pickup");      stmt.setInt(6, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookingDTOList.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookingDTOList;  }  public List<ServiceBookingDTO> getBookingsByCustomerIDAndStatus(int customerID, String status) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.Status = ? AND sb.CustomerID = ?      ORDER BY sb.BookingDate DESC, sb.BookingTime DESC      """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, status);      stmt.setInt(2, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  // Update existing booking  public boolean updateBooking(ServiceBooking booking) {    String sql = "UPDATE ServiceBooking SET VehicleID = ?, ServiceID = ?, BookingDate = ?, BookingTime = ?, Status = ?, StaffID = ?, TotalCost = ? WHERE BookingID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, booking.getVehicleID());      stmt.setInt(2, booking.getServiceID());      stmt.setDate(3, Date.valueOf(booking.getBookingDate()));      stmt.setTime(4, Time.valueOf(booking.getBookingTime()));      stmt.setString(5, booking.getStatus());      if (booking.getStaffID() != null) {stmt.setInt(6, booking.getStaffID());}      else {stmt.setNull(6, Types.INTEGER);}      if (booking.getTotalCost() != null) stmt.setDouble(7, booking.getTotalCost());      else {stmt.setNull(7, Types.DOUBLE);}      stmt.setInt(8, booking.getBookingID());      return stmt.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  public List<ServiceBookingDTO> getAllBookings() {    List<ServiceBookingDTO> bookings = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      ORDER BY sb.BookingDate DESC, sb.BookingTime DESC      """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  public ServiceBookingDTO getBookingDTOByID(int bookingID) {    String sql = """    SELECT sb.BookingID,        sb.BookingDate,        sb.BookingTime,        sb.Status,        sb.TotalCost,        c.FirstName AS CustomerFirstName,        c.LastName AS CustomerLastName,        c.Email AS CustomerEmail,        v.VehicleID,        v.PlateNumber,        v.Model AS VehicleModel,        v.Type AS VehicleType,        s.ServiceID,        s.Type AS ServiceType,        s.Cost AS ServiceCost,        s.Description AS ServiceDescription,        e.EmployeeID AS StaffID,        e.FirstName AS StaffFirstName,        e.LastName AS StaffLastName,        e.Role AS StaffRole    FROM ServiceBooking sb    JOIN Customer c ON sb.CustomerID = c.CustomerID    JOIN Vehicle v ON sb.VehicleID = v.VehicleID    JOIN Service s ON sb.ServiceID = s.ServiceID    LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID    WHERE sb.BookingID = ?    """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, bookingID);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        return extractBookingDetailFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  public List<ServiceBookingDTO> getAllBookings(String status) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.Status = ?      ORDER BY sb.BookingDate DESC, sb.BookingTime DESC      """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, status);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  // Get all bookings for a customer  public List<ServiceBookingDTO> getBookingsByCustomer(int customerID) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.CustomerID = ?      ORDER BY sb.BookingDate DESC, sb.BookingTime DESC      """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  public List<ServiceBookingDTO> getBookingsByCustomer(int customerID, String status) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.CustomerID = ? AND sb.status = ?      ORDER BY sb.BookingDate DESC, sb.BookingTime DESC      """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      stmt.setString(2, status);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  // Filtered bookings retrieval  public List<ServiceBookingDTO> getBookingsByCustomer(int customerID,                             String startDateStr,                             String endDateStr,                             String vehicleTypeFilter,                             String vehicleFilter,                             String serviceFilter,                             String staffFilter) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    List<Object> parameters = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.CustomerID = ?      """;    parameters.add(customerID);    // Date filter    if (startDateStr != null && !startDateStr.isEmpty()) {      sql += " AND sb.BookingDate >= ?";      parameters.add(LocalDate.parse(startDateStr));    }    if (endDateStr != null && !endDateStr.isEmpty()) {      sql += " AND sb.BookingDate <= ?";      parameters.add(LocalDate.parse(endDateStr));    }    // Vehicle type    if (vehicleTypeFilter != null && !vehicleTypeFilter.equalsIgnoreCase("all")) {      sql += " AND v.Type = ?";      parameters.add(vehicleTypeFilter);    }    // Vehicle ID    if (vehicleFilter != null && !vehicleFilter.equalsIgnoreCase("all")) {      sql += " AND v.VehicleID = ?";      parameters.add(Integer.parseInt(vehicleFilter));    }    // Service filter    if (serviceFilter != null && !serviceFilter.equalsIgnoreCase("all")) {      sql += " AND s.ServiceID = ?";      parameters.add(Integer.parseInt(serviceFilter));    }    // Staff filter    if (staffFilter != null && !staffFilter.equalsIgnoreCase("all")) {      sql += " AND e.EmployeeID = ?";      parameters.add(Integer.parseInt(staffFilter));    }    sql += " ORDER BY sb.BookingDate DESC, sb.BookingTime DESC";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      for (int i = 0; i < parameters.size(); i++) {        Object param = parameters.get(i);        if (param instanceof String) {          stmt.setString(i + 1, (String) param);        } else if (param instanceof Integer) {          stmt.setInt(i + 1, (Integer) param);        } else if (param instanceof LocalDate) {          stmt.setDate(i + 1, Date.valueOf((LocalDate) param));        }      }      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  public List<ServiceBookingDTO> getActiveBookingByEmployee(int employeeID) {    List<ServiceBookingDTO> bookingDTOList = new ArrayList<>();    String sql = """    SELECT sb.BookingID,        sb.BookingDate,        sb.BookingTime,        sb.Status,        sb.TotalCost,        c.FirstName AS CustomerFirstName,        c.LastName AS CustomerLastName,        c.Email AS CustomerEmail,        v.VehicleID,        v.PlateNumber,        v.Model AS VehicleModel,        v.Type AS VehicleType,        s.ServiceID,        s.Type AS ServiceType,        s.Description AS ServiceDescription,        s.Cost AS ServiceCost,        e.EmployeeID AS StaffID,        e.FirstName AS StaffFirstName,        e.LastName AS StaffLastName,        e.Role AS StaffRole    FROM ServiceBooking sb    JOIN Customer c ON sb.CustomerID = c.CustomerID    JOIN Vehicle v ON sb.VehicleID = v.VehicleID    JOIN Service s ON sb.ServiceID = s.ServiceID    LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID    WHERE (sb.Status = ? OR sb.Status = ?) AND sb.StaffID = ?    ORDER BY sb.BookingDate DESC, sb.BookingTime DESC    """;    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, "Confirmed");      stmt.setString(2, "In Progress");      stmt.setInt(3, employeeID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookingDTOList.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookingDTOList;  }  private ServiceBooking extractBookingFromResultSet(ResultSet rs) {    try {      ServiceBooking booking = new ServiceBooking();      booking.setBookingID(rs.getInt("BookingID"));      booking.setCustomerID(rs.getInt("CustomerID"));      booking.setVehicleID(rs.getInt("VehicleID"));      booking.setServiceID(rs.getInt("ServiceID"));      booking.setStatus(rs.getString("Status"));      booking.setTotalCost(rs.getDouble("TotalCost"));      // Fix: set StaffID properly      int staffID = rs.getInt("StaffID");      if (!rs.wasNull()) {        booking.setStaffID(staffID);      }      // Handle booking date and time      java.sql.Date bookingDate = rs.getDate("BookingDate");      java.sql.Time bookingTime = rs.getTime("BookingTime");      if (bookingDate != null) booking.setBookingDate(bookingDate.toLocalDate());      if (bookingTime != null) booking.setBookingTime(bookingTime.toLocalTime());      return booking;    } catch (Exception e) {      e.printStackTrace();      return null;    }  }  public List<ServiceBookingDTO> getBookingsByCustomerWithFilters(      int customerID,      String startDateStr,      String endDateStr,      String vehicleTypeFilter,      String vehicleFilter,      String statusFilter,      String minCostStr,      String maxCostStr,      String keyword) {    List<ServiceBookingDTO> bookings = new ArrayList<>();    List<Object> parameters = new ArrayList<>();    String sql = """      SELECT sb.BookingID,          sb.BookingDate,          sb.BookingTime,          sb.Status,          sb.TotalCost,          c.FirstName AS CustomerFirstName,          c.LastName AS CustomerLastName,          c.Email AS CustomerEmail,          v.VehicleID,          v.PlateNumber,          v.Model AS VehicleModel,          v.Type AS VehicleType,          s.ServiceID,          s.Type AS ServiceType,          s.Description AS ServiceDescription,          s.Cost AS ServiceCost,          e.EmployeeID AS StaffID,          e.FirstName AS StaffFirstName,          e.LastName AS StaffLastName,          e.Role AS StaffRole      FROM ServiceBooking sb      JOIN Customer c ON sb.CustomerID = c.CustomerID      JOIN Vehicle v ON sb.VehicleID = v.VehicleID      JOIN Service s ON sb.ServiceID = s.ServiceID      LEFT JOIN Employee e ON sb.StaffID = e.EmployeeID      WHERE sb.CustomerID = ?      """;    parameters.add(customerID);    // date range filter    if (startDateStr != null && !startDateStr.isEmpty()) {      sql += " AND sb.BookingDate >= ?";      parameters.add(LocalDate.parse(startDateStr));    }    if (endDateStr != null && !endDateStr.isEmpty()) {      sql += " AND sb.BookingDate <= ?";      parameters.add(LocalDate.parse(endDateStr));    }    // vehicle type filter    if (vehicleTypeFilter != null && !vehicleTypeFilter.isEmpty() && !vehicleTypeFilter.equals("All")) {      sql += " AND v.Type = ?";      parameters.add(vehicleTypeFilter);    }    // vehicle filter    if (vehicleFilter != null && !vehicleFilter.isEmpty() && !vehicleFilter.equals("All")) {      sql += " AND v.VehicleID = ?";      parameters.add(Integer.parseInt(vehicleFilter));    }    // status filter    if (statusFilter != null && !statusFilter.isEmpty() && !statusFilter.equals("All")) {      sql += " AND sb.Status = ?";      parameters.add(statusFilter);    }    // cost range filter    if (minCostStr != null && !minCostStr.isEmpty()) {      sql += " AND sb.TotalCost >= ?";      parameters.add(Double.parseDouble(minCostStr));    }    if (maxCostStr != null && !maxCostStr.isEmpty()) {      sql += " AND sb.TotalCost <= ?";      parameters.add(Double.parseDouble(maxCostStr));    }    // keywo    if (keyword != null && !keyword.isEmpty()) {      sql += " AND (s.Type LIKE ? OR s.Description LIKE ?)";      String keywordPattern = "%" + keyword + "%";      parameters.add(keywordPattern);      parameters.add(keywordPattern);    }    sql += " ORDER BY sb.BookingDate DESC, sb.BookingTime DESC";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      // Set parameters      for (int i = 0; i < parameters.size(); i++) {        Object param = parameters.get(i);        if (param instanceof String) {          stmt.setString(i + 1, (String) param);        } else if (param instanceof Integer) {          stmt.setInt(i + 1, (Integer) param);        } else if (param instanceof LocalDate) {          stmt.setDate(i + 1, Date.valueOf((LocalDate) param));        } else if (param instanceof Double) {          stmt.setDouble(i + 1, (Double) param);        }      }      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        bookings.add(extractBookingDetailFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return bookings;  }  // Map ResultSet to DTO  private ServiceBookingDTO extractBookingDetailFromResultSet(ResultSet rs) {    ServiceBookingDTO serviceBookingDTO = null;    try {      serviceBookingDTO = new ServiceBookingDTO();      serviceBookingDTO.setBookingID(rs.getInt("BookingID"));      serviceBookingDTO.setBookingDate(rs.getDate("BookingDate").toLocalDate());      serviceBookingDTO.setBookingTime(rs.getTime("BookingTime").toLocalTime());      serviceBookingDTO.setStatus(rs.getString("Status"));      serviceBookingDTO.setTotalCost(rs.getDouble("TotalCost"));      serviceBookingDTO.setCustomerFirstName(rs.getString("CustomerFirstName"));      serviceBookingDTO.setCustomerLastName(rs.getString("CustomerLastName"));      serviceBookingDTO.setCustomerEmail(rs.getString("CustomerEmail"));      serviceBookingDTO.setVehicleID(rs.getInt("VehicleID"));      serviceBookingDTO.setVehiclePlate(rs.getString("PlateNumber"));      serviceBookingDTO.setVehicleModel(rs.getString("VehicleModel"));      serviceBookingDTO.setVehicleType(rs.getString("VehicleType"));      serviceBookingDTO.setServiceID(rs.getInt("ServiceID"));      serviceBookingDTO.setServiceType(rs.getString("ServiceType"));      serviceBookingDTO.setServiceDescription(rs.getString("ServiceDescription"));      serviceBookingDTO.setServiceCost(rs.getDouble("ServiceCost"));      int staffID = rs.getInt("StaffID");      if (!rs.wasNull()) {        serviceBookingDTO.setStaffID(staffID);        serviceBookingDTO.setStaffFirstName(rs.getString("StaffFirstName"));        serviceBookingDTO.setStaffLastName(rs.getString("StaffLastName"));        serviceBookingDTO.setStaffRole(rs.getString("StaffRole"));      }    } catch (Exception e) {      e.printStackTrace();    }    return serviceBookingDTO;  }}

File Path: src\main\java\com\example\autofuelx\dao\ServiceDAO.java
package com.example.autofuelx.dao; import com.example.autofuelx.model.Service;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class ServiceDAO {  // Insert new Service  public boolean insertService(Service service) {    String sql = "INSERT INTO Service (Type, Description, Cost) VALUES (?, ?, ?)";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setString(1, service.getType());      ps.setString(2, service.getDescription());      ps.setDouble(3, service.getCost());      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  // Update Service by ID  public boolean updateService(Service service) {    String sql = "UPDATE Service SET Type = ?, Cost = ?, Description = ? WHERE ServiceID = ?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setString(1, service.getType());      ps.setDouble(2, service.getCost());      ps.setString(3, service.getDescription());      ps.setInt(3, service.getServiceID());      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  // Delete Service by ID  public boolean deleteService(int serviceID) {    String sql = "DELETE FROM Service WHERE ServiceID = ?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setInt(1, serviceID);      return ps.executeUpdate() > 0;    } catch (SQLException e) {      e.printStackTrace();      return false;    }  }  // Get Service by ID  public Service getServiceById(int serviceID) {    String sql = "SELECT * FROM Service WHERE ServiceID = ?";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql)) {      ps.setInt(1, serviceID);      ResultSet rs = ps.executeQuery();      if (rs.next()) {        return extractServiceFromResultSet(rs);      }    } catch (SQLException e) {      e.printStackTrace();    }    return null;  }  // Get all Services  public List<Service> getAllServices() {    List<Service> services = new ArrayList<>();    String sql = "SELECT * FROM Service";    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql);       ResultSet rs = ps.executeQuery()) {      while (rs.next()) {        services.add(extractServiceFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return services;  }  public List<Service> getFilteredServices(Double minCost, Double maxCost, String keyword) {    List<Service> services = new ArrayList<>();    StringBuilder sql = new StringBuilder("SELECT * FROM Service WHERE 1=1");    List<Object> parameters = new ArrayList<>();    // Add cost filters    if (minCost != null) {      sql.append(" AND Cost >= ?");      parameters.add(minCost);    }    if (maxCost != null) {      sql.append(" AND Cost <= ?");      parameters.add(maxCost);    }    // Add keyword filter (search in Type and Description)    if (keyword != null && !keyword.isEmpty()) {      sql.append(" AND (Type LIKE ? OR Description LIKE ?)");      String keywordPattern = "%" + keyword + "%";      parameters.add(keywordPattern);      parameters.add(keywordPattern);    }    try (Connection con = DatabaseConnection.getConnection();       PreparedStatement ps = con.prepareStatement(sql.toString())) {      // Set parameters      for (int i = 0; i < parameters.size(); i++) {        ps.setObject(i + 1, parameters.get(i));      }      ResultSet rs = ps.executeQuery();      while (rs.next()) {        services.add(extractServiceFromResultSet(rs));      }    } catch (SQLException e) {      e.printStackTrace();    }    return services;  }  // Helper method to map ResultSet -> Service object  private Service extractServiceFromResultSet(ResultSet rs) throws SQLException {    Service service = new Service();    service.setServiceID(rs.getInt("ServiceID"));    service.setDescription(rs.getString("Description"));    service.setType(rs.getString("Type"));    service.setCost(rs.getDouble("Cost"));    return service;  }}

File Path: src\main\java\com\example\autofuelx\dao\VehicleDAO.java
package com.example.autofuelx.dao;import com.example.autofuelx.model.Vehicle;import com.example.autofuelx.util.DatabaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class VehicleDAO {  // Add Vehicle  public boolean addVehicle(Vehicle vehicle) {    boolean success = false;    String sql = "INSERT INTO Vehicle (PlateNumber, Type, Model, Color, CustomerID, RegistrationDate) VALUES (?, ?, ?, ?, ?, ?)";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, vehicle.getPlateNumber());      stmt.setString(2, vehicle.getType());      stmt.setString(3, vehicle.getModel());      stmt.setString(4, vehicle.getColor());      stmt.setInt(5, vehicle.getCustomerID());      stmt.setDate(6, new java.sql.Date(vehicle.getRegistrationDate().getTime()));      success = stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return success;  }  // Get all vehicles for a customer  public List<Vehicle> getVehiclesByCustomerID(int customerID) {    List<Vehicle> list = new ArrayList<>();    String sql = "SELECT * FROM Vehicle WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        Vehicle vehicle = new Vehicle();        vehicle = extractVehicleFromResultSet(rs);        list.add(vehicle);      }    } catch (Exception e) {      e.printStackTrace();    }    return list;  }  // Update Vehicle  public boolean updateVehicle(Vehicle vehicle) {    boolean success = false;    String sql = "UPDATE Vehicle SET PlateNumber=?, Type=?, Model=?, Color=?, RegistrationDate=? WHERE VehicleID=? AND CustomerID=?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setString(1, vehicle.getPlateNumber());      stmt.setString(2, vehicle.getType());      stmt.setString(3, vehicle.getModel());      stmt.setString(4, vehicle.getColor());      stmt.setDate(5, new java.sql.Date(vehicle.getRegistrationDate().getTime()));      stmt.setInt(6, vehicle.getVehicleID());      stmt.setInt(7, vehicle.getCustomerID());      success = stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return success;  }  // Delete Vehicle  public boolean deleteVehicle(int vehicleID, int customerID) {    boolean success = false;    String sql = "DELETE FROM Vehicle WHERE VehicleID=? AND CustomerID=?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, vehicleID);      stmt.setInt(2, customerID);      success = stmt.executeUpdate() > 0;    } catch (Exception e) {      e.printStackTrace();    }    return success;  }  // Get vehicle by ID  public Vehicle getVehicleByID(int vehicleID) {    Vehicle vehicle = null;    String sql = "SELECT * FROM Vehicle WHERE VehicleID=?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)) {      stmt.setInt(1, vehicleID);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        vehicle = extractVehicleFromResultSet(rs);      }    } catch (Exception e) {      e.printStackTrace();    }    return vehicle;  }  public Vehicle getVehicleByPlateNo(String plateNo) {    Vehicle vehicle = null;    String sql = "SELECT * FROM Vehicle WHERE PlateNumber=?";    try(Connection conn = DatabaseConnection.getConnection();      PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setString(1, plateNo);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        vehicle = extractVehicleFromResultSet(rs);      }    }catch (Exception e){      e.printStackTrace();    }    return vehicle;  }  public Vehicle getVehicleByPlateNumber(String plateNumber) {    Vehicle vehicle = null;    String sql = "SELECT * FROM Vehicle WHERE PlateNumber = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setString(1, plateNumber);      ResultSet rs = stmt.executeQuery();      if (rs.next()) {        vehicle = extractVehicleFromResultSet(rs);      }    } catch (Exception e){      e.printStackTrace();    }    return vehicle;  }  public List<String> getVehicleTypesByCustomerID(int customerID) {    List<String> vehicleTypes = new ArrayList<>();    String sql = "SELECT DISTINCT Type FROM Vehicle WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        vehicleTypes.add(rs.getString("Type"));      }    } catch (Exception e){      e.printStackTrace();    }    return vehicleTypes;  }  public List<String> getVehicleNamesByCustomerID(int customerID) {    List<String> vehicleNames = new ArrayList<>();    String sql = "SELECT DISTINCT Model + ' - ' + Vehicle.PlateNumber as Vehicle FROM Vehicle WHERE CustomerID = ?";    try (Connection conn = DatabaseConnection.getConnection();       PreparedStatement stmt = conn.prepareStatement(sql)){      stmt.setInt(1, customerID);      ResultSet rs = stmt.executeQuery();      while (rs.next()) {        vehicleNames.add(rs.getString("Vehicle"));      }    } catch (Exception e){      e.printStackTrace();    }    return vehicleNames;  }  private Vehicle extractVehicleFromResultSet(ResultSet rs) {    try{      Vehicle vehicle = new Vehicle();      vehicle.setVehicleID(rs.getInt("VehicleID"));      vehicle.setPlateNumber(rs.getString("PlateNumber"));      vehicle.setType(rs.getString("Type"));      vehicle.setModel(rs.getString("Model"));      vehicle.setColor(rs.getString("Color"));      vehicle.setCustomerID(rs.getInt("CustomerID"));      vehicle.setRegistrationDate(rs.getDate("RegistrationDate"));      return vehicle;    }    catch (Exception e){      return null;    }  }}

File Path: src\main\java\com\example\autofuelx\dto\ComplaintReplyDTO.java
package com.example.autofuelx.dto;import java.sql.Date;import java.sql.Time;public class ComplaintReplyDTO {  // Complaint fields  private int complaintID;  private int customerID;  private String title;  private String description;  private String status;  private Date createdDate;  private Time createdTime;  private Date updatedDate;  private Time updateTime;  // Reply fields  private Integer replyComplaintID; // Can be null if no reply  private Integer staffID; // Can be null if no reply  private String replyTitle;  private String replyDescription;  private String replyStatus;  private Date replyCreatedDate;  private Time replyCreatedTime;  private Date replyUpdatedDate;  private Time replyUpdateTime;  // Employee fields (from Employee table)  private String repliedEmployeeName;  private String repliedEmployeeType;  // Getters and Setters  public int getComplaintID() { return complaintID; }  public void setComplaintID(int complaintID) { this.complaintID = complaintID; }  public int getCustomerID() { return customerID; }  public void setCustomerID(int customerID) { this.customerID = customerID; }  public String getTitle() { return title; }  public void setTitle(String title) { this.title = title; }  public String getDescription() { return description; }  public void setDescription(String description) { this.description = description; }  public String getStatus() { return status; }  public void setStatus(String status) { this.status = status; }  public Date getCreatedDate() { return createdDate; }  public void setCreatedDate(Date createdDate) { this.createdDate = createdDate; }  public Time getCreatedTime() { return createdTime; }  public void setCreatedTime(Time createdTime) { this.createdTime = createdTime; }  public Date getUpdatedDate() { return updatedDate; }  public void setUpdatedDate(Date updatedDate) { this.updatedDate = updatedDate; }  public Time getUpdateTime() { return updateTime; }  public void setUpdateTime(Time updateTime) { this.updateTime = updateTime; }  public Integer getReplyComplaintID() { return replyComplaintID; }  public void setReplyComplaintID(Integer replyComplaintID) { this.replyComplaintID = replyComplaintID; }  public Integer getStaffID() { return staffID; }  public void setStaffID(Integer staffID) { this.staffID = staffID; }  public String getReplyStatus() {    return replyStatus;  }  public void setReplyStatus(String replyStatus) {    this.replyStatus = replyStatus;  }  public String getReplyTitle() { return replyTitle; }  public void setReplyTitle(String replyTitle) { this.replyTitle = replyTitle; }  public String getReplyDescription() { return replyDescription; }  public void setReplyDescription(String replyDescription) { this.replyDescription = replyDescription; }  public Date getReplyCreatedDate() { return replyCreatedDate; }  public void setReplyCreatedDate(Date replyCreatedDate) { this.replyCreatedDate = replyCreatedDate; }  public Time getReplyCreatedTime() { return replyCreatedTime; }  public void setReplyCreatedTime(Time replyCreatedTime) { this.replyCreatedTime = replyCreatedTime; }  public Date getReplyUpdatedDate() { return replyUpdatedDate; }  public void setReplyUpdatedDate(Date replyUpdatedDate) { this.replyUpdatedDate = replyUpdatedDate; }  public Time getReplyUpdateTime() { return replyUpdateTime; }  public void setReplyUpdateTime(Time replyUpdateTime) { this.replyUpdateTime = replyUpdateTime; }  public String getRepliedEmployeeName() { return repliedEmployeeName; }  public void setRepliedEmployeeName(String repliedEmployeeName) { this.repliedEmployeeName = repliedEmployeeName; }  public String getRepliedEmployeeType() { return repliedEmployeeType; }  public void setRepliedEmployeeType(String repliedEmployeeType) { this.repliedEmployeeType = repliedEmployeeType; }}

File Path: src\main\java\com\example\autofuelx\dto\FuelPurchaseDetailDTO.java
package com.example.autofuelx.dto;import java.time.LocalDate;import java.time.LocalTime;public class FuelPurchaseDetailDTO {  private int fuelPurchaseID;  // Customer info  private String customerName;   // e.g. "John Doe"  private String customerEmail;  // useful for admin  // Vehicle info  private String vehiclePlate;   // e.g. "ABC-1234"  private String vehicleModel;   // e.g. "Toyota Corolla"  private String vehicleType;   // Fixed: consistent naming  // Fuel info  private String fuelType;  private double quantity;  private double totalCost;  // Date and time separated  private LocalDate purchaseDate;  private LocalTime purchaseTime;  // Getters and Setters  public int getFuelPurchaseID() {    return fuelPurchaseID;  }  public void setFuelPurchaseID(int fuelPurchaseID) {    this.fuelPurchaseID = fuelPurchaseID;  }  public String getCustomerName() {    return customerName;  }  public void setCustomerName(String customerName) {    this.customerName = customerName;  }  public String getVehiclePlate() {    return vehiclePlate;  }  public void setVehiclePlate(String vehiclePlate) {    this.vehiclePlate = vehiclePlate;  }  public String getCustomerEmail() {    return customerEmail;  }  public void setCustomerEmail(String customerEmail) {    this.customerEmail = customerEmail;  }  public String getVehicleModel() {    return vehicleModel;  }  public void setVehicleModel(String vehicleModel) {    this.vehicleModel = vehicleModel;  }  public String getVehicleType() {    return vehicleType;  }  public void setVehicleType(String vehicleType) {    this.vehicleType = vehicleType;  }  public String getFuelType() {    return fuelType;  }  public void setFuelType(String fuelType) {    this.fuelType = fuelType;  }  public double getQuantity() {    return quantity;  }  public void setQuantity(double quantity) {    this.quantity = quantity;  }  public LocalDate getPurchaseDate() {    return purchaseDate;  }  public void setPurchaseDate(LocalDate purchaseDate) {    this.purchaseDate = purchaseDate;  }  public LocalTime getPurchaseTime() {    return purchaseTime;  }  public void setPurchaseTime(LocalTime purchaseTime) {    this.purchaseTime = purchaseTime;  }  public double getTotalCost() {    return totalCost;  }  public void setTotalCost(double totalCost) {    this.totalCost = totalCost;  }}

File Path: src\main\java\com\example\autofuelx\dto\ServiceBookingDTO.java
package com.example.autofuelx.dto;import java.time.LocalDate;import java.time.LocalTime;public class ServiceBookingDTO {  private int bookingID;  private LocalDate bookingDate;  private LocalTime bookingTime;  private String status;  private double totalCost;  // Customer info  private String customerFirstName;  private String customerLastName;  private String customerEmail;  // Vehicle info  private int vehicleID;  private String vehiclePlate;  private String vehicleModel;  private String vehicleType;  // Service info  private int serviceID;  private String serviceType;  private String serviceDescription;  private double serviceCost;  // Staff info (nullable)  private Integer staffID;  private String staffFirstName;  private String staffLastName;  private String staffRole;  // Getters and Setters  public int getBookingID() {    return bookingID;  }  public void setBookingID(int bookingID) {    this.bookingID = bookingID;  }  public LocalDate getBookingDate() {    return bookingDate;  }  public void setBookingDate(LocalDate bookingDate) {    this.bookingDate = bookingDate;  }  public LocalTime getBookingTime() {    return bookingTime;  }  public void setBookingTime(LocalTime bookingTime) {    this.bookingTime = bookingTime;  }  public String getStatus() {    return status;  }  public void setStatus(String status) {    this.status = status;  }  public double getTotalCost() {    return totalCost;  }  public void setTotalCost(double totalCost) {    this.totalCost = totalCost;  }  public String getCustomerFirstName() {    return customerFirstName;  }  public void setCustomerFirstName(String customerFirstName) {    this.customerFirstName = customerFirstName;  }  public String getCustomerLastName() {    return customerLastName;  }  public void setCustomerLastName(String customerLastName) {    this.customerLastName = customerLastName;  }  public String getCustomerEmail() {    return customerEmail;  }  public void setCustomerEmail(String customerEmail) {    this.customerEmail = customerEmail;  }  public int getVehicleID() {    return vehicleID;  }  public void setVehicleID(int vehicleID) {    this.vehicleID = vehicleID;  }  public String getVehiclePlate() {    return vehiclePlate;  }  public void setVehiclePlate(String vehiclePlate) {    this.vehiclePlate = vehiclePlate;  }  public String getVehicleModel() {    return vehicleModel;  }  public void setVehicleModel(String vehicleModel) {    this.vehicleModel = vehicleModel;  }  public String getVehicleType() {    return vehicleType;  }  public void setVehicleType(String vehicleType) {    this.vehicleType = vehicleType;  }  public int getServiceID() {    return serviceID;  }  public void setServiceID(int serviceID) {    this.serviceID = serviceID;  }  public String getServiceType() {    return serviceType;  }  public void setServiceType(String serviceType) {    this.serviceType = serviceType;  }  public String getServiceDescription() {    return serviceDescription;  }  public void setServiceDescription(String serviceDescription) {    this.serviceDescription = serviceDescription;  }  public double getServiceCost() {    return serviceCost;  }  public void setServiceCost(double serviceCost) {    this.serviceCost = serviceCost;  }  public Integer getStaffID() {    return staffID;  }  public void setStaffID(Integer staffID) {    this.staffID = staffID;  }  public String getStaffFirstName() {    return staffFirstName;  }  public void setStaffFirstName(String staffFirstName) {    this.staffFirstName = staffFirstName;  }  public String getStaffLastName() {    return staffLastName;  }  public void setStaffLastName(String staffLastName) {    this.staffLastName = staffLastName;  }  public String getStaffRole() {    return staffRole;  }  public void setStaffRole(String staffRole) {    this.staffRole = staffRole;  }}

File Path: src\main\java\com\example\autofuelx\model\Complaint.java
package com.example.autofuelx.model;import java.sql.Date;import java.sql.Time;public class Complaint {  private int complaintID;  private int customerID;  private String title;  private String description;  private String status;  private Date createdDate;  private Time createdTime;  private Date updatedDate;  private Time updateTime;  // Getters and Setters  public int getComplaintID() {    return complaintID;  }  public void setComplaintID(int complaintID) {    this.complaintID = complaintID;  }  public int getCustomerID() {    return customerID;  }  public void setCustomerID(int customerID) {    this.customerID = customerID;  }  public String getTitle() {    return title;  }  public void setTitle(String title) {    this.title = title;  }  public String getDescription() {    return description;  }  public void setDescription(String description) {    this.description = description;  }  public String getStatus() {    return status;  }  public void setStatus(String status) {    this.status = status;  }  public Date getCreatedDate() {    return createdDate;  }  public void setCreatedDate(Date createdDate) {    this.createdDate = createdDate;  }  public Time getCreatedTime() {    return createdTime;  }  public void setCreatedTime(Time createdTime) {    this.createdTime = createdTime;  }  public Date getUpdatedDate() {    return updatedDate;  }  public void setUpdatedDate(Date updatedDate) {    this.updatedDate = updatedDate;  }  public Time getUpdateTime() {    return updateTime;  }  public void setUpdateTime(Time updateTime) {    this.updateTime = updateTime;  }}

File Path: src\main\java\com\example\autofuelx\model\Customer.java
package com.example.autofuelx.model;public class Customer {  private int customerID;  private String firstName;  private String lastName;  private String email;    // NEW FIELD  private String password;  private String addressNo;  private String addressLane;  private String addressArea;  // Getters and Setters  public int getCustomerID() { return customerID; }  public void setCustomerID(int customerID) { this.customerID = customerID; }  public String getFirstName() { return firstName; }  public void setFirstName(String firstName) { this.firstName = firstName; }  public String getLastName() { return lastName; }  public void setLastName(String lastName) { this.lastName = lastName; }  public String getEmail() { return email; }  public void setEmail(String email) { this.email = email; }  public String getPassword() { return password; }  public void setPassword(String password) { this.password = password; }  public String getAddressNo() { return addressNo; }  public void setAddressNo(String addressNo) { this.addressNo = addressNo; }  public String getAddressLane() { return addressLane; }  public void setAddressLane(String addressLane) { this.addressLane = addressLane; }  public String getAddressArea() { return addressArea; }  public void setAddressArea(String addressArea) { this.addressArea = addressArea; }}

File Path: src\main\java\com\example\autofuelx\model\CustomerPhoneNumber.java
package com.example.autofuelx.model;public class CustomerPhoneNumber {  private int customerID;  private String phoneNumber;  public CustomerPhoneNumber() {}  public CustomerPhoneNumber(int customerID, String phoneNumber) {    this.customerID = customerID;    this.phoneNumber = phoneNumber;  }  public int getCustomerID() {    return customerID;  }  public void setCustomerID(int customerID) {    this.customerID = customerID;  }  public String getPhoneNumber() {    return phoneNumber;  }  public void setPhoneNumber(String phoneNumber) {    this.phoneNumber = phoneNumber;  }}

File Path: src\main\java\com\example\autofuelx\model\Employee.java
package com.example.autofuelx.model;import java.sql.Date;public class Employee {  private int employeeID;  private String firstName;  private String lastName;  private Date dateOfBirth;  private double salary;  private String status;  private Date hireDate;  private String addressNo;  private String addressLane;  private String addressArea;  private String email;  private String password;  private String skillSet;  private String role;  private String shift;  private String type;  // Constructors  public Employee() {}  public Employee(int employeeID, String firstName, String lastName, Date dateOfBirth,          double salary, String status, Date hireDate, String addressNo,          String addressLane, String addressArea, String email, String password, String skillSet,          String role, String shift, String type) {    this.employeeID = employeeID;    this.firstName = firstName;    this.lastName = lastName;    this.dateOfBirth = dateOfBirth;    this.salary = salary;    this.status = status;    this.hireDate = hireDate;    this.addressNo = addressNo;    this.addressLane = addressLane;    this.addressArea = addressArea;    this.email = email;    this.skillSet = skillSet;    this.role = role;    this.shift = shift;    this.type = type;    this.password = password;  }  // Getters and Setters  public int getEmployeeID() {    return employeeID;  }  public void setEmployeeID(int employeeID) {    this.employeeID = employeeID;  }  public String getFirstName() {    return firstName;  }  public void setFirstName(String firstName) {    this.firstName = firstName;  }  public String getLastName() {    return lastName;  }  public void setLastName(String lastName) {    this.lastName = lastName;  }  public Date getDateOfBirth() {    return dateOfBirth;  }  public void setDateOfBirth(Date dateOfBirth) {    this.dateOfBirth = dateOfBirth;  }  public double getSalary() {    return salary;  }  public void setSalary(double salary) {    this.salary = salary;  }  public String getStatus() {    return status;  }  public void setStatus(String status) {    this.status = status;  }  public Date getHireDate() {    return hireDate;  }  public void setHireDate(Date hireDate) {    this.hireDate = hireDate;  }  public String getAddressNo() {    return addressNo;  }  public void setAddressNo(String addressNo) {    this.addressNo = addressNo;  }  public String getAddressLane() {    return addressLane;  }  public void setAddressLane(String addressLane) {    this.addressLane = addressLane;  }  public String getAddressArea() {    return addressArea;  }  public String getFullyAddress(){    return addressNo + " " + addressLane + " " + addressArea;  }  public void setAddressArea(String addressArea) {    this.addressArea = addressArea;  }  public String getEmail() {    return email;  }  public void setEmail(String email) {    this.email = email;  }  public String getPassword() {    return password;  }  public void setPassword(String password) {    this.password = password;  }  public String getSkillSet() {    return skillSet;  }  public void setSkillSet(String skillSet) {    this.skillSet = skillSet;  }  public String getRole() {    return role;  }  public void setRole(String role) {    this.role = role;  }  public String getShift() {    return shift;  }  public void setShift(String shift) {    this.shift = shift;  }  public String getType() {    return type;  }  public void setType(String type) {    this.type = type;  }}

File Path: src\main\java\com\example\autofuelx\model\EmployeePhoneNumber.java
package com.example.autofuelx.model;public class EmployeePhoneNumber {  private int employeeID;  private String phoneNumber;  public EmployeePhoneNumber() {}  public EmployeePhoneNumber(int employeeID, String phoneNumber) {    this.employeeID = employeeID;    this.phoneNumber = phoneNumber;  }  public int getEmployeeID() {    return employeeID;  }  public void setEmployeeID(int employeeID) {    this.employeeID = employeeID;  }  public String getPhoneNumber() {    return phoneNumber;  }  public void setPhoneNumber(String phoneNumber) {    this.phoneNumber = phoneNumber;  }}

File Path: src\main\java\com\example\autofuelx\model\Feedback.java
package com.example.autofuelx.model;import java.time.LocalDate;import java.time.LocalTime;public class Feedback {  private int feedbackID;  private int rate;  private String message;  private LocalDate createdDate;  private LocalTime createdTime;  private int customerID;  // Getters & Setters  public int getFeedbackID() {    return feedbackID;  }  public void setFeedbackID(int feedbackID) {    this.feedbackID = feedbackID;  }  public int getRate() {    return rate;  }  public void setRate(int rate) {    this.rate = rate;  }  public String getMessage() {    return message;  }  public void setMessage(String message) {    this.message = message;  }  public LocalDate getCreatedDate() {    return createdDate;  }  public void setCreatedDate(LocalDate createdDate) {    this.createdDate = createdDate;  }  public LocalTime getCreatedTime() {    return createdTime;  }  public void setCreatedTime(LocalTime createdTime) {    this.createdTime = createdTime;  }  public int getCustomerID() {    return customerID;  }  public void setCustomerID(int customerID) {    this.customerID = customerID;  }}

File Path: src\main\java\com\example\autofuelx\model\Fuel.java
package com.example.autofuelx.model;public class Fuel {  private int fuelID;  private String type;  private double quantity;  private double costPerLiter;  // Constructors  public Fuel() {}  public Fuel(int fuelID, String type, double quantity, double costPerLiter) {    this.fuelID = fuelID;    this.type = type;    this.quantity = quantity;    this.costPerLiter = costPerLiter;  }  // Getters & Setters  public int getFuelID() {    return fuelID;  }  public void setFuelID(int fuelID) {    this.fuelID = fuelID;  }  public String getType() {    return type;  }  public void setType(String type) {    this.type = type;  }  public double getQuantity() {    return quantity;  }  public void setQuantity(double quantity) {    this.quantity = quantity;  }  public double getCostPerLiter() {    return costPerLiter;  }  public void setCostPerLiter(double costPerLiter) {    this.costPerLiter = costPerLiter;  }}

File Path: src\main\java\com\example\autofuelx\model\FuelPurchase.java
package com.example.autofuelx.model;import java.time.LocalDate;import java.time.LocalTime;public class FuelPurchase {  private int fuelPurchaseID;  private int customerID;  private int fuelID;  private int vehicleID;  private double quantity;  private double totalCost;  private LocalDate purchaseDate;  private LocalTime purchaseTime;  // Getters and Setters  public int getFuelPurchaseID() {    return fuelPurchaseID;  }  public void setFuelPurchaseID(int fuelPurchaseID) {    this.fuelPurchaseID = fuelPurchaseID;  }  public int getCustomerID() {    return customerID;  }  public void setCustomerID(int customerID) {    this.customerID = customerID;  }  public int getFuelID() {    return fuelID;  }  public void setFuelID(int fuelID) {    this.fuelID = fuelID;  }  public int getVehicleID() {    return vehicleID;  }  public void setVehicleID(int vehicleID) {    this.vehicleID = vehicleID;  }  public double getQuantity() {    return quantity;  }  public void setQuantity(double quantity) {    this.quantity = quantity;  }  public double getTotalCost() {    return totalCost;  }  public void setTotalCost(double totalCost) {    this.totalCost = totalCost;  }  public LocalDate getPurchaseDate() {    return purchaseDate;  }  public void setPurchaseDate(LocalDate purchaseDate) {    this.purchaseDate = purchaseDate;  }  public LocalTime getPurchaseTime() {    return purchaseTime;  }  public void setPurchaseTime(LocalTime purchaseTime) {    this.purchaseTime = purchaseTime;  }}

File Path: src\main\java\com\example\autofuelx\model\ReplyComplaint.java
package com.example.autofuelx.model;import java.sql.Date;import java.sql.Time;public class ReplyComplaint {  private int replyComplaintID;  private int staffID;  private int complaintID;  private String title;  private String description;  private String status;  private Date createdDate;  private Time createdTime;  private Date updatedDate;  private Time updateTime;  // Getters and Setters  public int getReplyComplaintID() {    return replyComplaintID;  }  public void setReplyComplaintID(int replyComplaintID) {    this.replyComplaintID = replyComplaintID;  }  public int getStaffID() {    return staffID;  }  public void setStaffID(int staffID) {    this.staffID = staffID;  }  public int getComplaintID() {    return complaintID;  }  public void setComplaintID(int complaintID) {    this.complaintID = complaintID;  }  public String getTitle() {    return title;  }  public void setTitle(String title) {    this.title = title;  }  public String getDescription() {    return description;  }  public void setDescription(String description) {    this.description = description;  }  public Date getCreatedDate() {    return createdDate;  }  public void setCreatedDate(Date createdDate) {    this.createdDate = createdDate;  }  public Time getCreatedTime() {    return createdTime;  }  public void setCreatedTime(Time createdTime) {    this.createdTime = createdTime;  }  public Date getUpdatedDate() {    return updatedDate;  }  public void setUpdatedDate(Date updatedDate) {    this.updatedDate = updatedDate;  }  public Time getUpdateTime() {    return updateTime;  }  public void setUpdateTime(Time updateTime) {    this.updateTime = updateTime;  }  public String getStatus() {    return status;  }  public void setStatus(String status) {    this.status = status;  }}

File Path: src\main\java\com\example\autofuelx\model\Service.java
package com.example.autofuelx.model;public class Service {  private int serviceID;  private String type;  private String description;  private double cost;  // Constructors  public Service() {  }  public Service(int serviceID, String type, String description, double cost) {    this.serviceID = serviceID;    this.type = type;    this.description = description;    this.cost = cost;  }  // Getters and Setters  public int getServiceID() {    return serviceID;  }  public void setServiceID(int serviceID) {    this.serviceID = serviceID;  }  public String getType() {    return type;  }  public void setType(String type) {    this.type = type;  }  public double getCost() {    return cost;  }  public void setCost(double cost) {    this.cost = cost;  }  public String getDescription() {    return description;  }  public void setDescription(String description) {    this.description = description;  }  // Optional: toString() for debugging  @Override  public String toString() {    return "Service{" +        "serviceID=" + serviceID +        ", type='" + type + '\'' +        ", cost=" + cost +        '}';  }}

File Path: src\main\java\com\example\autofuelx\model\ServiceBooking.java
package com.example.autofuelx.model;import java.time.LocalDate;import java.time.LocalTime;public class ServiceBooking {  private int bookingID;  private int customerID;  private int vehicleID;  private int serviceID;  private Integer staffID; // can be null if not assigned  private LocalDate bookingDate;  private LocalTime bookingTime;  private String status;  private double totalCost;  public ServiceBooking() {  }  public ServiceBooking(int bookingID, int customerID, int vehicleID, int serviceID, Integer staffID,             LocalDate bookingDate, LocalTime bookingTime, String status, double totalCost) {    this.bookingID = bookingID;    this.customerID = customerID;    this.vehicleID = vehicleID;    this.serviceID = serviceID;    this.staffID = staffID;    this.bookingDate = bookingDate;    this.bookingTime = bookingTime;    this.status = status;    this.totalCost = totalCost;  }  // --- Getters & Setters ---  public int getBookingID() {    return bookingID;  }  public void setBookingID(int bookingID) {    this.bookingID = bookingID;  }  public int getCustomerID() {    return customerID;  }  public void setCustomerID(int customerID) {    this.customerID = customerID;  }  public int getVehicleID() {    return vehicleID;  }  public void setVehicleID(int vehicleID) {    this.vehicleID = vehicleID;  }  public int getServiceID() {    return serviceID;  }  public void setServiceID(int serviceID) {    this.serviceID = serviceID;  }  public Integer getStaffID() {    return staffID;  }  public void setStaffID(Integer staffID) {    this.staffID = staffID;  }  public LocalDate getBookingDate() {    return bookingDate;  }  public void setBookingDate(LocalDate bookingDate) {    this.bookingDate = bookingDate;  }  public LocalTime getBookingTime() {    return bookingTime;  }  public void setBookingTime(LocalTime bookingTime) {    this.bookingTime = bookingTime;  }  public String getStatus() {    return status;  }  public void setStatus(String status) {    this.status = status;  }  public Double getTotalCost() {    return totalCost;  }  public void setTotalCost(double totalCost) {    this.totalCost = totalCost;  }  // --- ToString ---  @Override  public String toString() {    return "Booking{" +        "bookingID=" + bookingID +        ", customerID=" + customerID +        ", vehicleID=" + vehicleID +        ", serviceID=" + serviceID +        ", staffID=" + staffID +        ", bookingDate=" + bookingDate +        ", bookingTime=" + bookingTime +        ", status='" + status + '\'' +        '}';  }}

File Path: src\main\java\com\example\autofuelx\model\Vehicle.java
package com.example.autofuelx.model;import java.util.Date;public class Vehicle {  private int vehicleID;  private String plateNumber;  private String type;  private String model;  private String color;  private int customerID;  private Date registrationDate;  // Getters and Setters  public int getVehicleID() { return vehicleID; }  public void setVehicleID(int vehicleID) { this.vehicleID = vehicleID; }  public String getPlateNumber() { return plateNumber; }  public void setPlateNumber(String plateNumber) { this.plateNumber = plateNumber; }  public String getType() { return type; }  public void setType(String type) { this.type = type; }  public String getModel() { return model; }  public void setModel(String model) { this.model = model; }  public String getColor() { return color; }  public void setColor(String color) { this.color = color; }  public int getCustomerID() { return customerID; }  public void setCustomerID(int customerID) { this.customerID = customerID; }  public Date getRegistrationDate() { return registrationDate; }  public void setRegistrationDate(Date registrationDate) { this.registrationDate = registrationDate; }}

File Path: src\main\java\com\example\autofuelx\service\ComplaintService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.ComplaintDAO;import com.example.autofuelx.dto.ComplaintReplyDTO;import com.example.autofuelx.model.Complaint;import java.util.List;public class ComplaintService {  ComplaintDAO complaintDAO;  public ComplaintService(){    complaintDAO = new ComplaintDAO();  }  public void submitComplaint(Complaint complaint) {    complaintDAO.addComplaint(complaint);  }  public void updateComplaint(Complaint complaint) {    complaintDAO.updateComplaint(complaint);  }  public void deleteComplaint(int complaintID) {    complaintDAO.deleteComplaint(complaintID);  }  public boolean updateComplaintStatus(int complaintID, String status) {    return complaintDAO.updateComplaintStatus(complaintID, status);  }  public List<Complaint> getComplaintsByCustomerID(int customerID) {    return complaintDAO.getComplaintsByCustomerId(customerID);  }  public Complaint getComplaintByComplaintID(int complaintID) {    return complaintDAO.getComplaintById(complaintID);  }  public List<ComplaintReplyDTO> getComplaintsWithReplyByCustomerId(int customerID) {    return complaintDAO.getComplaintReplyDTOsByCustomerID(customerID);  }  public List<ComplaintReplyDTO> getComplaintsWithReplyByStatus(String status) {    return complaintDAO.getComplaintReplyDTOsByStatus(status);  }  public ComplaintReplyDTO getComplaintReplyDTOByComplaintID(int complaintID) {    return complaintDAO.getComplaintReplyDTOByComplaintID(complaintID);  }  public List<ComplaintReplyDTO> getComplaintReplyDTOsFiltered(String keyword,                                String lastUpdateDate,                                String customerEmail,                                String status) {    return complaintDAO.getComplaintReplyDTOsFiltered(keyword, lastUpdateDate, customerEmail, status);  }}

File Path: src\main\java\com\example\autofuelx\service\CustomerPhoneNumberService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.CustomerPhoneNumberDAO;import com.example.autofuelx.model.CustomerPhoneNumber;import java.util.List;public class CustomerPhoneNumberService {  private final CustomerPhoneNumberDAO phoneDAO;  public CustomerPhoneNumberService() {    this.phoneDAO = new CustomerPhoneNumberDAO();  }  // Add a phone number  public boolean addPhoneNumber(int customerID, String phoneNumber) {    if (phoneNumber == null || phoneNumber.trim().isEmpty()) {      return false; // validation: don't allow empty numbers    }    CustomerPhoneNumber phone = new CustomerPhoneNumber(customerID, phoneNumber.trim());    return phoneDAO.addPhoneNumber(phone);  }  // Delete a phone number  public boolean deletePhoneNumber(int customerID, String phoneNumber) {    return phoneDAO.deletePhoneNumber(customerID, phoneNumber);  }  // Get all phone numbers for a customer  public List<String> getPhoneNumbersByCustomer(int customerID) {    return phoneDAO.getPhoneNumbersByCustomer(customerID);  }}

File Path: src\main\java\com\example\autofuelx\service\CustomerService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.CustomerDAO;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Customer;import java.util.List;public class CustomerService {  private CustomerDAO customerDAO;  public CustomerService() {    customerDAO = new CustomerDAO();  }  public boolean registerCustomer(Customer customer) {    return customerDAO.registerCustomer(customer);  }  public Customer loginCustomer(String email, String password) {    return customerDAO.loginCustomer(email, password);  }  public List<Customer> getCustomers() {    return customerDAO.getCustomers();  }  public Customer getCustomerById(int id) {    return customerDAO.getCustomerById(id);  }  public boolean deleteCustomer(int id) {    return customerDAO.deleteCustomer(id);  }  public boolean updateCustomer(Customer customer) {    return customerDAO.updateCustomer(customer);  }  public Customer getCustomerByEmail(String email) {    return customerDAO.getCustomerByEmail(email);  }}

File Path: src\main\java\com\example\autofuelx\service\EmployeePhoneNumberService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.EmployeePhoneNumberDAO;import com.example.autofuelx.model.EmployeePhoneNumber;import java.util.List;public class EmployeePhoneNumberService {  private final EmployeePhoneNumberDAO phoneDAO;  public EmployeePhoneNumberService() {    this.phoneDAO = new EmployeePhoneNumberDAO();  }  // Add a phone number  public boolean addPhoneNumber(int employeeID, String phoneNumber) {    if (phoneNumber == null || phoneNumber.trim().isEmpty()) {      return false; // validation: don't allow empty numbers    }    EmployeePhoneNumber phone = new EmployeePhoneNumber(employeeID, phoneNumber.trim());    return phoneDAO.addPhoneNumber(phone);  }  // Delete a phone number  public boolean deletePhoneNumber(int employeeID, String phoneNumber) {    return phoneDAO.deletePhoneNumber(employeeID, phoneNumber);  }  // Get all phone numbers for a employee  public List<String> getPhoneNumbersByEmployee(int employeeID) {    return phoneDAO.getPhoneNumbersByEmployee(employeeID);  }}

File Path: src\main\java\com\example\autofuelx\service\EmployeeService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.EmployeeDAO;import com.example.autofuelx.model.Employee;import com.example.autofuelx.util.DatabaseConnection;import java.sql.Connection;import java.sql.Date;import java.util.List;public class EmployeeService {  private EmployeeDAO employeeDAO;  public EmployeeService() {    this.employeeDAO = new EmployeeDAO();  }  public List<Employee> getAllEmployees() {    return employeeDAO.getAllEmployees();  }  public Employee getEmployeeById(int id) {    return employeeDAO.getEmployeeById(id);  }  public List<Employee> getFilteredEmployees(String type, String status,                        Date hireDateFrom, Date hireDateTo,                        Double minSalary, Double maxSalary,                        String name, String ageGroup) {    return employeeDAO.getFilteredEmployees(type, status, hireDateFrom, hireDateTo,        minSalary, maxSalary, name, ageGroup);  }  public boolean addEmployee(Employee employee) {    return employeeDAO.addEmployee(employee);  }  public boolean updateEmployee(Employee employee) {    return employeeDAO.updateEmployee(employee);  }  public boolean deleteEmployee(int id) {    return employeeDAO.deleteEmployee(id);  }  public List<Employee> getEmployeesByType(String type) {    return employeeDAO.getEmployeesByType(type);  }  public boolean updateEmployeeStatus(int employeeID, String status) {    return employeeDAO.updateEmployeeStatus(employeeID, status);  }  public List<Employee> getEmployeesByTypeStatus(String type, String status) {    return employeeDAO.getEmployeesByType(type, status);  }  public Employee validateEmployee(String email, String password, String role) {    return employeeDAO.validateEmployee(email, password, role);  }}

File Path: src\main\java\com\example\autofuelx\service\FeedbackService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.FeedbackDAO;import com.example.autofuelx.model.Feedback;import java.util.List;public class FeedbackService {  FeedbackDAO feedbackDAO ;  public FeedbackService(){    feedbackDAO = new FeedbackDAO();  }  public void submitFeedback(Feedback feedback) {    feedbackDAO.saveFeedback(feedback);  }  public void deleteComplaint(int feedbackID) {    feedbackDAO.deleteFeedback(feedbackID);  }  public List<Feedback> getComplaintsByUserID(int userID) {    return feedbackDAO.getFeedbacksByCustomerID(userID);  }}

File Path: src\main\java\com\example\autofuelx\service\FuelPurchaseService.java
 package com.example.autofuelx.service;import com.example.autofuelx.dao.FuelDAO;import com.example.autofuelx.dao.FuelPurchaseDAO;import com.example.autofuelx.model.Fuel;import com.example.autofuelx.model.FuelPurchase;import com.example.autofuelx.dto.FuelPurchaseDetailDTO;import java.util.List;public class FuelPurchaseService {  private FuelPurchaseDAO fuelPurchaseDAO;  private FuelDAO fuelDAO;  public FuelPurchaseService() {    fuelPurchaseDAO = new FuelPurchaseDAO();    fuelDAO = new FuelDAO();  }  public void makePurchase(FuelPurchase purchase) {    // Update fuel level    Fuel fuel = fuelDAO.getFuelById(purchase.getFuelID());    double fuelAmount = fuel.getQuantity() - purchase.getQuantity();    fuel.setQuantity(fuelAmount);    fuelDAO.updateFuel(fuel);    fuelPurchaseDAO.insertFuelPurchase(purchase);  }  public List<FuelPurchaseDetailDTO> getFuelPurchaseDetailsByCustomerID(int customerID,                                     String durationFilterStart,                                     String durationFilterEnd,                                     String vehicleTypeFilter,                                     String vehicleFilter,                                     String fuelTypeFilter) {    return fuelPurchaseDAO.getFuelPurchaseDetailByCustomer(customerID, durationFilterStart, durationFilterEnd, vehicleTypeFilter, vehicleFilter, fuelTypeFilter );  }  public double getPurchaseCost(int fuelID, double quantity) {    Fuel fuel = fuelDAO.getFuelById(fuelID); // DAO just returns price    fuelDAO.updateFuel(fuel);    return quantity * fuel.getCostPerLiter(); // business logic here  }}

File Path: src\main\java\com\example\autofuelx\service\FuelService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.FuelDAO;import com.example.autofuelx.model.Fuel;import java.util.List;public class FuelService {  private FuelDAO fuelDAO;  public FuelService() {    fuelDAO = new FuelDAO();  }  // Add fuel  public void addFuel(Fuel fuel) {    fuelDAO.addFuel(fuel);  }  // Get fuel by ID  public Fuel getFuelById(int fuelID) {    return fuelDAO.getFuelById(fuelID);  }  // Get all fuels  public List<Fuel> getAllFuels() {    return fuelDAO.getAllFuels();  }  // Update fuel  public void updateFuel(Fuel fuel) {    fuelDAO.updateFuel(fuel);  }  // Delete fuel  public void deleteFuel(int fuelID) {    fuelDAO.deleteFuel(fuelID);  }}

File Path: src\main\java\com\example\autofuelx\service\ReplyComplaintService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.ReplyComplaintDAO;import com.example.autofuelx.model.ReplyComplaint;import java.util.List;public class ReplyComplaintService {  private final ReplyComplaintDAO replyComplaintDAO;  public ReplyComplaintService() {    this.replyComplaintDAO = new ReplyComplaintDAO();  }  public boolean submitReplyComplaint(ReplyComplaint replyComplaint) {    return replyComplaintDAO.addReplyComplaint(replyComplaint);  }  // Update reply  public boolean updateReplyComplaint(ReplyComplaint replyComplaint) {    return replyComplaintDAO.updateReplyComplaint(replyComplaint);  }  public boolean updateReplyComplaintStatus(int replyComplaintID, String status) {    return replyComplaintDAO.updateReplyComplaintStatus(replyComplaintID, status);  }  // Delete reply  public boolean deleteReply(int replyComplaintID) {    return replyComplaintDAO.deleteReplyComplaint(replyComplaintID);  }  // Get reply by ID  public ReplyComplaint getReplyComplaintByReplyComplaintID(int replyComplaintID) {    return replyComplaintDAO.getReplyComplaintByComplaintID(replyComplaintID);  }  public ReplyComplaint getReplyComplaintByComplaintID(int ComplaintID) {    return replyComplaintDAO.getReplyComplaintByComplaintID(ComplaintID);  }  // Get all replies  public List<ReplyComplaint> getAllReplyComplaints() {    return replyComplaintDAO.getAllReplyComplaints();  }  // Get replies by staff ID  public List<ReplyComplaint> getReplyComplaintByStaffID(int staffID) {    return replyComplaintDAO.getReplyComplaintsByStaffId(staffID);  }}

File Path: src\main\java\com\example\autofuelx\service\ServiceBookingService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.ServiceBookingDAO;import com.example.autofuelx.dto.ServiceBookingDTO;import com.example.autofuelx.model.ServiceBooking;import java.util.List;public class ServiceBookingService {  ServiceBookingDAO serviceBookingDAO;  public ServiceBookingService() {    serviceBookingDAO = new ServiceBookingDAO();  }  public boolean bookService(ServiceBooking serviceBooking) {    return serviceBookingDAO.insertBooking(serviceBooking);  }  public boolean updateBooking(ServiceBooking serviceBooking) {    return serviceBookingDAO.updateBooking(serviceBooking);  }  public List<ServiceBookingDTO> getAllBookings() {    return serviceBookingDAO.getAllBookings();  }  public List<ServiceBookingDTO> getAllBookings(String status) {    return serviceBookingDAO.getAllBookings(status);  }  public List<ServiceBookingDTO> getBookingsByCustomerID(int customerID) {    return serviceBookingDAO.getBookingsByCustomer(customerID);  }  public List<ServiceBookingDTO> getActiveBookingsByCustomerID(int customerID) {    return serviceBookingDAO.getActiveBookingsByCustomerID(customerID);  }  public ServiceBooking getBookingByID(int bookingID) {    return serviceBookingDAO.getBookingByID(bookingID);  }  public ServiceBookingDTO getBookingDTOByID(int bookingID) {    return serviceBookingDAO.getBookingDTOByID(bookingID);  }  public List<ServiceBookingDTO> getBookingsByCustomerIDAndStatus(int customerID, String status) {    return serviceBookingDAO.getBookingsByCustomerIDAndStatus(customerID, status);  }  public List<ServiceBookingDTO> getActiveBookingByEmployee(int employeeID) {    return serviceBookingDAO.getActiveBookingByEmployee(employeeID);  }  public List<ServiceBookingDTO> getBookingsByCustomerWithFilters(      int customerID,      String startDate,      String endDate,      String vehicleType,      String vehicle,      String status,      String minCost,      String maxCost,      String keyword) {    return serviceBookingDAO.getBookingsByCustomerWithFilters(        customerID, startDate, endDate, vehicleType, vehicle, status, minCost, maxCost, keyword);  }}

File Path: src\main\java\com\example\autofuelx\service\ServiceManager.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.ServiceDAO;import com.example.autofuelx.model.Service;import java.util.List;public class ServiceManager {  ServiceDAO serviceDAO;  public ServiceManager(){    serviceDAO = new ServiceDAO();  }  public List<Service> getAllServices() {    return serviceDAO.getAllServices();  }  public Service getServiceByID(int serviceID) {    return serviceDAO.getServiceById(serviceID);  }  public boolean addService(Service service) {    return serviceDAO.insertService(service);  }  public boolean updateService(Service service) {    return serviceDAO.updateService(service);  }  public boolean deleteService(int serviceID) {    return serviceDAO.deleteService(serviceID);  }  public List<Service> getFilteredServices(Double minCost, Double maxCost, String keyword) {    return serviceDAO.getFilteredServices(minCost, maxCost, keyword);  }}

File Path: src\main\java\com\example\autofuelx\service\VehicleService.java
package com.example.autofuelx.service;import com.example.autofuelx.dao.VehicleDAO;import com.example.autofuelx.model.Vehicle;import java.util.List;public class VehicleService {  private VehicleDAO vehicleDAO;  public VehicleService() {    vehicleDAO = new VehicleDAO();  }  public boolean addVehicle(Vehicle vehicle) {    return vehicleDAO.addVehicle(vehicle);  }  public List<Vehicle> getVehiclesByCustomerID(int customerID) {    return vehicleDAO.getVehiclesByCustomerID(customerID);  }  public boolean updateVehicle(Vehicle vehicle) {    return vehicleDAO.updateVehicle(vehicle);  }  public boolean deleteVehicle(int vehicleID, int customerID) {    return vehicleDAO.deleteVehicle(vehicleID, customerID);  }  public Vehicle getVehicleByID(int vehicleID) {    return vehicleDAO.getVehicleByID(vehicleID);  }  public Vehicle getVehicleByPlateNo(String plateNo) {    return vehicleDAO.getVehicleByPlateNo(plateNo);  }  public List<String> getVehicleNamesByCustomerID(int customerID) {    return vehicleDAO.getVehicleNamesByCustomerID(customerID);  }  public List<String> getVehicleTypesByCustomerID(int customerID) {    return vehicleDAO.getVehicleTypesByCustomerID(customerID);  }}

File Path: src\main\java\com\example\autofuelx\strategy\CardPaymentStrategy.java
package com.example.autofuelx.strategy;public class CardPaymentStrategy implements PaymentStrategy {  private final String cardNumber;  public CardPaymentStrategy(String cardNumber) {    this.cardNumber = cardNumber;  }  @Override  public String processPayment(double amount) {    // In a real app you'd call a payment gateway. Here we return a demo message.    String masked = cardNumber == null ? "****"        : "****-****-****-"            + (cardNumber.length() > 4 ? cardNumber.substring(cardNumber.length() - 4) : cardNumber);    return String.format("Processed card payment of %.2f using card %s", amount, masked);  }}

File Path: src\main\java\com\example\autofuelx\strategy\CashPaymentStrategy.java
package com.example.autofuelx.strategy;public class CashPaymentStrategy implements PaymentStrategy {  @Override  public String processPayment(double amount) {    return String.format("Recorded cash payment of %.2f (no external gateway required)", amount);  }}

File Path: src\main\java\com\example\autofuelx\strategy\PaymentStrategy.java
package com.example.autofuelx.strategy;/** * Strategy interface for payment processing. */public interface PaymentStrategy {  /**   * Process a payment of the given amount and return a human-readable result.   */  String processPayment(double amount);}

File Path: src\main\java\com\example\autofuelx\strategy\PayPalPaymentStrategy.java
package com.example.autofuelx.strategy;public class PayPalPaymentStrategy implements PaymentStrategy {  private final String accountEmail;  public PayPalPaymentStrategy(String accountEmail) {    this.accountEmail = accountEmail;  }  @Override  public String processPayment(double amount) {    return String.format("Processed PayPal payment of %.2f from account %s", amount,        accountEmail == null ? "(unknown)" : accountEmail);  }}

File Path: src\main\java\com\example\autofuelx\util\AuthUtil.java
package com.example.autofuelx.util;import com.example.autofuelx.model.Customer;import com.example.autofuelx.model.Employee;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.io.IOException;public class AuthUtil {  // returns logged in customer or redirects if not logged in  public static Customer checkCustomerLogin(HttpServletRequest request, HttpServletResponse response) throws IOException {    HttpSession session = request.getSession();    Customer customer = (session != null) ? (Customer) session.getAttribute("customer") : null;    if (customer == null) {      response.sendRedirect(request.getContextPath() + "/views/customer/login.jsp");      return null;    }    return customer;  }  // returns logged in employee or redirects if not logged in  public static Employee checkEmployeeLogin(HttpServletRequest request, HttpServletResponse response, String employeeType) throws IOException {    HttpSession session = request.getSession();    Employee employee = (session != null) ? (Employee) session.getAttribute("employee") : null;    if (employee == null) {      response.sendRedirect(request.getContextPath() + "/views/employee/login.jsp");      return null;    }    if (!employeeType.equals(employee.getType())) {      response.sendRedirect(request.getContextPath() + "/views/employee/login.jsp");      return null;    }    return employee;  }  // returns logged in employee or redirects if not logged in  public static Employee checkEmployeeLogin(HttpServletRequest request, HttpServletResponse response) throws IOException {    HttpSession session = request.getSession();    Employee employee = (session != null) ? (Employee) session.getAttribute("employee") : null;    if (employee == null) {      response.sendRedirect(request.getContextPath() + "/views/employee/login.jsp");      return null;    }    return employee;  }}

File Path: src\main\java\com\example\autofuelx\util\DatabaseConnection.java
package com.example.autofuelx.util;import java.sql.Connection;import java.sql.DriverManager;public class DatabaseConnection {  // Database URL, username and password  static String URL = "jdbc:sqlserver://localhost:1433;databaseName=AutoFuelX;encrypt=false;";  static String USER = "sa";  static String PASSWORD = "789";  public static Connection getConnection() {    Connection conn = null;    try {      Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");      // Connect to DB      conn = DriverManager.getConnection(URL, USER, PASSWORD);    } catch (Exception e) {      e.printStackTrace();    }    return conn;  }}

